/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// GeneralPopulationStats struct for GeneralPopulationStats
type GeneralPopulationStats struct {
	Counts *SignalPopulationStats `json:"counts,omitempty"`
	Frequencies *SignalPopulationStats `json:"frequencies,omitempty"`
}

// NewGeneralPopulationStats instantiates a new GeneralPopulationStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeneralPopulationStats() *GeneralPopulationStats {
	this := GeneralPopulationStats{}
	return &this
}

// NewGeneralPopulationStatsWithDefaults instantiates a new GeneralPopulationStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeneralPopulationStatsWithDefaults() *GeneralPopulationStats {
	this := GeneralPopulationStats{}
	return &this
}

// GetCounts returns the Counts field value if set, zero value otherwise.
func (o *GeneralPopulationStats) GetCounts() SignalPopulationStats {
	if o == nil || isNil(o.Counts) {
		var ret SignalPopulationStats
		return ret
	}
	return *o.Counts
}

// GetCountsOk returns a tuple with the Counts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralPopulationStats) GetCountsOk() (*SignalPopulationStats, bool) {
	if o == nil || isNil(o.Counts) {
    return nil, false
	}
	return o.Counts, true
}

// HasCounts returns a boolean if a field has been set.
func (o *GeneralPopulationStats) HasCounts() bool {
	if o != nil && !isNil(o.Counts) {
		return true
	}

	return false
}

// SetCounts gets a reference to the given SignalPopulationStats and assigns it to the Counts field.
func (o *GeneralPopulationStats) SetCounts(v SignalPopulationStats) {
	o.Counts = &v
}

// GetFrequencies returns the Frequencies field value if set, zero value otherwise.
func (o *GeneralPopulationStats) GetFrequencies() SignalPopulationStats {
	if o == nil || isNil(o.Frequencies) {
		var ret SignalPopulationStats
		return ret
	}
	return *o.Frequencies
}

// GetFrequenciesOk returns a tuple with the Frequencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralPopulationStats) GetFrequenciesOk() (*SignalPopulationStats, bool) {
	if o == nil || isNil(o.Frequencies) {
    return nil, false
	}
	return o.Frequencies, true
}

// HasFrequencies returns a boolean if a field has been set.
func (o *GeneralPopulationStats) HasFrequencies() bool {
	if o != nil && !isNil(o.Frequencies) {
		return true
	}

	return false
}

// SetFrequencies gets a reference to the given SignalPopulationStats and assigns it to the Frequencies field.
func (o *GeneralPopulationStats) SetFrequencies(v SignalPopulationStats) {
	o.Frequencies = &v
}

func (o GeneralPopulationStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Counts) {
		toSerialize["counts"] = o.Counts
	}
	if !isNil(o.Frequencies) {
		toSerialize["frequencies"] = o.Frequencies
	}
	return json.Marshal(toSerialize)
}

type NullableGeneralPopulationStats struct {
	value *GeneralPopulationStats
	isSet bool
}

func (v NullableGeneralPopulationStats) Get() *GeneralPopulationStats {
	return v.value
}

func (v *NullableGeneralPopulationStats) Set(val *GeneralPopulationStats) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneralPopulationStats) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneralPopulationStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneralPopulationStats(val *GeneralPopulationStats) *NullableGeneralPopulationStats {
	return &NullableGeneralPopulationStats{value: val, isSet: true}
}

func (v NullableGeneralPopulationStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneralPopulationStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


