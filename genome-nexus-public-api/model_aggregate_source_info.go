/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// AggregateSourceInfo struct for AggregateSourceInfo
type AggregateSourceInfo struct {
	AnnotationSourcesInfo []SourceVersionInfo `json:"annotationSourcesInfo,omitempty"`
	GenomeNexus *GenomeNexusInfo `json:"genomeNexus,omitempty"`
	Vep *VEPInfo `json:"vep,omitempty"`
}

// NewAggregateSourceInfo instantiates a new AggregateSourceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregateSourceInfo() *AggregateSourceInfo {
	this := AggregateSourceInfo{}
	return &this
}

// NewAggregateSourceInfoWithDefaults instantiates a new AggregateSourceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregateSourceInfoWithDefaults() *AggregateSourceInfo {
	this := AggregateSourceInfo{}
	return &this
}

// GetAnnotationSourcesInfo returns the AnnotationSourcesInfo field value if set, zero value otherwise.
func (o *AggregateSourceInfo) GetAnnotationSourcesInfo() []SourceVersionInfo {
	if o == nil || isNil(o.AnnotationSourcesInfo) {
		var ret []SourceVersionInfo
		return ret
	}
	return o.AnnotationSourcesInfo
}

// GetAnnotationSourcesInfoOk returns a tuple with the AnnotationSourcesInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateSourceInfo) GetAnnotationSourcesInfoOk() ([]SourceVersionInfo, bool) {
	if o == nil || isNil(o.AnnotationSourcesInfo) {
    return nil, false
	}
	return o.AnnotationSourcesInfo, true
}

// HasAnnotationSourcesInfo returns a boolean if a field has been set.
func (o *AggregateSourceInfo) HasAnnotationSourcesInfo() bool {
	if o != nil && !isNil(o.AnnotationSourcesInfo) {
		return true
	}

	return false
}

// SetAnnotationSourcesInfo gets a reference to the given []SourceVersionInfo and assigns it to the AnnotationSourcesInfo field.
func (o *AggregateSourceInfo) SetAnnotationSourcesInfo(v []SourceVersionInfo) {
	o.AnnotationSourcesInfo = v
}

// GetGenomeNexus returns the GenomeNexus field value if set, zero value otherwise.
func (o *AggregateSourceInfo) GetGenomeNexus() GenomeNexusInfo {
	if o == nil || isNil(o.GenomeNexus) {
		var ret GenomeNexusInfo
		return ret
	}
	return *o.GenomeNexus
}

// GetGenomeNexusOk returns a tuple with the GenomeNexus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateSourceInfo) GetGenomeNexusOk() (*GenomeNexusInfo, bool) {
	if o == nil || isNil(o.GenomeNexus) {
    return nil, false
	}
	return o.GenomeNexus, true
}

// HasGenomeNexus returns a boolean if a field has been set.
func (o *AggregateSourceInfo) HasGenomeNexus() bool {
	if o != nil && !isNil(o.GenomeNexus) {
		return true
	}

	return false
}

// SetGenomeNexus gets a reference to the given GenomeNexusInfo and assigns it to the GenomeNexus field.
func (o *AggregateSourceInfo) SetGenomeNexus(v GenomeNexusInfo) {
	o.GenomeNexus = &v
}

// GetVep returns the Vep field value if set, zero value otherwise.
func (o *AggregateSourceInfo) GetVep() VEPInfo {
	if o == nil || isNil(o.Vep) {
		var ret VEPInfo
		return ret
	}
	return *o.Vep
}

// GetVepOk returns a tuple with the Vep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateSourceInfo) GetVepOk() (*VEPInfo, bool) {
	if o == nil || isNil(o.Vep) {
    return nil, false
	}
	return o.Vep, true
}

// HasVep returns a boolean if a field has been set.
func (o *AggregateSourceInfo) HasVep() bool {
	if o != nil && !isNil(o.Vep) {
		return true
	}

	return false
}

// SetVep gets a reference to the given VEPInfo and assigns it to the Vep field.
func (o *AggregateSourceInfo) SetVep(v VEPInfo) {
	o.Vep = &v
}

func (o AggregateSourceInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AnnotationSourcesInfo) {
		toSerialize["annotationSourcesInfo"] = o.AnnotationSourcesInfo
	}
	if !isNil(o.GenomeNexus) {
		toSerialize["genomeNexus"] = o.GenomeNexus
	}
	if !isNil(o.Vep) {
		toSerialize["vep"] = o.Vep
	}
	return json.Marshal(toSerialize)
}

type NullableAggregateSourceInfo struct {
	value *AggregateSourceInfo
	isSet bool
}

func (v NullableAggregateSourceInfo) Get() *AggregateSourceInfo {
	return v.value
}

func (v *NullableAggregateSourceInfo) Set(val *AggregateSourceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregateSourceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregateSourceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregateSourceInfo(val *AggregateSourceInfo) *NullableAggregateSourceInfo {
	return &NullableAggregateSourceInfo{value: val, isSet: true}
}

func (v NullableAggregateSourceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregateSourceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


