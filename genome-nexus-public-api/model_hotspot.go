/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// Hotspot struct for Hotspot
type Hotspot struct {
	// Hugo gene symbol
	HugoSymbol *string `json:"hugoSymbol,omitempty"`
	// Inframe mutation count
	InframeCount *int32 `json:"inframeCount,omitempty"`
	// Missense mutation count
	MissenseCount *int32 `json:"missenseCount,omitempty"`
	// Hotspot residue
	Residue *string `json:"residue,omitempty"`
	// Splice mutation count
	SpliceCount *int32 `json:"spliceCount,omitempty"`
	// Ensembl Transcript Id
	TranscriptId *string `json:"transcriptId,omitempty"`
	// Truncation mutation count
	TruncatingCount *int32 `json:"truncatingCount,omitempty"`
	// Tumor count
	TumorCount *int32 `json:"tumorCount,omitempty"`
	// Hotspot type
	Type *string `json:"type,omitempty"`
}

// NewHotspot instantiates a new Hotspot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotspot() *Hotspot {
	this := Hotspot{}
	return &this
}

// NewHotspotWithDefaults instantiates a new Hotspot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotspotWithDefaults() *Hotspot {
	this := Hotspot{}
	return &this
}

// GetHugoSymbol returns the HugoSymbol field value if set, zero value otherwise.
func (o *Hotspot) GetHugoSymbol() string {
	if o == nil || isNil(o.HugoSymbol) {
		var ret string
		return ret
	}
	return *o.HugoSymbol
}

// GetHugoSymbolOk returns a tuple with the HugoSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hotspot) GetHugoSymbolOk() (*string, bool) {
	if o == nil || isNil(o.HugoSymbol) {
    return nil, false
	}
	return o.HugoSymbol, true
}

// HasHugoSymbol returns a boolean if a field has been set.
func (o *Hotspot) HasHugoSymbol() bool {
	if o != nil && !isNil(o.HugoSymbol) {
		return true
	}

	return false
}

// SetHugoSymbol gets a reference to the given string and assigns it to the HugoSymbol field.
func (o *Hotspot) SetHugoSymbol(v string) {
	o.HugoSymbol = &v
}

// GetInframeCount returns the InframeCount field value if set, zero value otherwise.
func (o *Hotspot) GetInframeCount() int32 {
	if o == nil || isNil(o.InframeCount) {
		var ret int32
		return ret
	}
	return *o.InframeCount
}

// GetInframeCountOk returns a tuple with the InframeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hotspot) GetInframeCountOk() (*int32, bool) {
	if o == nil || isNil(o.InframeCount) {
    return nil, false
	}
	return o.InframeCount, true
}

// HasInframeCount returns a boolean if a field has been set.
func (o *Hotspot) HasInframeCount() bool {
	if o != nil && !isNil(o.InframeCount) {
		return true
	}

	return false
}

// SetInframeCount gets a reference to the given int32 and assigns it to the InframeCount field.
func (o *Hotspot) SetInframeCount(v int32) {
	o.InframeCount = &v
}

// GetMissenseCount returns the MissenseCount field value if set, zero value otherwise.
func (o *Hotspot) GetMissenseCount() int32 {
	if o == nil || isNil(o.MissenseCount) {
		var ret int32
		return ret
	}
	return *o.MissenseCount
}

// GetMissenseCountOk returns a tuple with the MissenseCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hotspot) GetMissenseCountOk() (*int32, bool) {
	if o == nil || isNil(o.MissenseCount) {
    return nil, false
	}
	return o.MissenseCount, true
}

// HasMissenseCount returns a boolean if a field has been set.
func (o *Hotspot) HasMissenseCount() bool {
	if o != nil && !isNil(o.MissenseCount) {
		return true
	}

	return false
}

// SetMissenseCount gets a reference to the given int32 and assigns it to the MissenseCount field.
func (o *Hotspot) SetMissenseCount(v int32) {
	o.MissenseCount = &v
}

// GetResidue returns the Residue field value if set, zero value otherwise.
func (o *Hotspot) GetResidue() string {
	if o == nil || isNil(o.Residue) {
		var ret string
		return ret
	}
	return *o.Residue
}

// GetResidueOk returns a tuple with the Residue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hotspot) GetResidueOk() (*string, bool) {
	if o == nil || isNil(o.Residue) {
    return nil, false
	}
	return o.Residue, true
}

// HasResidue returns a boolean if a field has been set.
func (o *Hotspot) HasResidue() bool {
	if o != nil && !isNil(o.Residue) {
		return true
	}

	return false
}

// SetResidue gets a reference to the given string and assigns it to the Residue field.
func (o *Hotspot) SetResidue(v string) {
	o.Residue = &v
}

// GetSpliceCount returns the SpliceCount field value if set, zero value otherwise.
func (o *Hotspot) GetSpliceCount() int32 {
	if o == nil || isNil(o.SpliceCount) {
		var ret int32
		return ret
	}
	return *o.SpliceCount
}

// GetSpliceCountOk returns a tuple with the SpliceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hotspot) GetSpliceCountOk() (*int32, bool) {
	if o == nil || isNil(o.SpliceCount) {
    return nil, false
	}
	return o.SpliceCount, true
}

// HasSpliceCount returns a boolean if a field has been set.
func (o *Hotspot) HasSpliceCount() bool {
	if o != nil && !isNil(o.SpliceCount) {
		return true
	}

	return false
}

// SetSpliceCount gets a reference to the given int32 and assigns it to the SpliceCount field.
func (o *Hotspot) SetSpliceCount(v int32) {
	o.SpliceCount = &v
}

// GetTranscriptId returns the TranscriptId field value if set, zero value otherwise.
func (o *Hotspot) GetTranscriptId() string {
	if o == nil || isNil(o.TranscriptId) {
		var ret string
		return ret
	}
	return *o.TranscriptId
}

// GetTranscriptIdOk returns a tuple with the TranscriptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hotspot) GetTranscriptIdOk() (*string, bool) {
	if o == nil || isNil(o.TranscriptId) {
    return nil, false
	}
	return o.TranscriptId, true
}

// HasTranscriptId returns a boolean if a field has been set.
func (o *Hotspot) HasTranscriptId() bool {
	if o != nil && !isNil(o.TranscriptId) {
		return true
	}

	return false
}

// SetTranscriptId gets a reference to the given string and assigns it to the TranscriptId field.
func (o *Hotspot) SetTranscriptId(v string) {
	o.TranscriptId = &v
}

// GetTruncatingCount returns the TruncatingCount field value if set, zero value otherwise.
func (o *Hotspot) GetTruncatingCount() int32 {
	if o == nil || isNil(o.TruncatingCount) {
		var ret int32
		return ret
	}
	return *o.TruncatingCount
}

// GetTruncatingCountOk returns a tuple with the TruncatingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hotspot) GetTruncatingCountOk() (*int32, bool) {
	if o == nil || isNil(o.TruncatingCount) {
    return nil, false
	}
	return o.TruncatingCount, true
}

// HasTruncatingCount returns a boolean if a field has been set.
func (o *Hotspot) HasTruncatingCount() bool {
	if o != nil && !isNil(o.TruncatingCount) {
		return true
	}

	return false
}

// SetTruncatingCount gets a reference to the given int32 and assigns it to the TruncatingCount field.
func (o *Hotspot) SetTruncatingCount(v int32) {
	o.TruncatingCount = &v
}

// GetTumorCount returns the TumorCount field value if set, zero value otherwise.
func (o *Hotspot) GetTumorCount() int32 {
	if o == nil || isNil(o.TumorCount) {
		var ret int32
		return ret
	}
	return *o.TumorCount
}

// GetTumorCountOk returns a tuple with the TumorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hotspot) GetTumorCountOk() (*int32, bool) {
	if o == nil || isNil(o.TumorCount) {
    return nil, false
	}
	return o.TumorCount, true
}

// HasTumorCount returns a boolean if a field has been set.
func (o *Hotspot) HasTumorCount() bool {
	if o != nil && !isNil(o.TumorCount) {
		return true
	}

	return false
}

// SetTumorCount gets a reference to the given int32 and assigns it to the TumorCount field.
func (o *Hotspot) SetTumorCount(v int32) {
	o.TumorCount = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Hotspot) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hotspot) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Hotspot) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Hotspot) SetType(v string) {
	o.Type = &v
}

func (o Hotspot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.HugoSymbol) {
		toSerialize["hugoSymbol"] = o.HugoSymbol
	}
	if !isNil(o.InframeCount) {
		toSerialize["inframeCount"] = o.InframeCount
	}
	if !isNil(o.MissenseCount) {
		toSerialize["missenseCount"] = o.MissenseCount
	}
	if !isNil(o.Residue) {
		toSerialize["residue"] = o.Residue
	}
	if !isNil(o.SpliceCount) {
		toSerialize["spliceCount"] = o.SpliceCount
	}
	if !isNil(o.TranscriptId) {
		toSerialize["transcriptId"] = o.TranscriptId
	}
	if !isNil(o.TruncatingCount) {
		toSerialize["truncatingCount"] = o.TruncatingCount
	}
	if !isNil(o.TumorCount) {
		toSerialize["tumorCount"] = o.TumorCount
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableHotspot struct {
	value *Hotspot
	isSet bool
}

func (v NullableHotspot) Get() *Hotspot {
	return v.value
}

func (v *NullableHotspot) Set(val *Hotspot) {
	v.value = val
	v.isSet = true
}

func (v NullableHotspot) IsSet() bool {
	return v.isSet
}

func (v *NullableHotspot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotspot(val *Hotspot) *NullableHotspot {
	return &NullableHotspot{value: val, isSet: true}
}

func (v NullableHotspot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotspot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


