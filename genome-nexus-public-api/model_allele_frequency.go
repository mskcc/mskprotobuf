/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// AlleleFrequency struct for AlleleFrequency
type AlleleFrequency struct {
	Af float64 `json:"af"`
	AfAfr float64 `json:"af_afr"`
	AfAmr float64 `json:"af_amr"`
	AfAsj float64 `json:"af_asj"`
	AfEas float64 `json:"af_eas"`
	AfFin float64 `json:"af_fin"`
	AfNfe float64 `json:"af_nfe"`
	AfOth float64 `json:"af_oth"`
	AfSas float64 `json:"af_sas"`
}

// NewAlleleFrequency instantiates a new AlleleFrequency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlleleFrequency(af float64, afAfr float64, afAmr float64, afAsj float64, afEas float64, afFin float64, afNfe float64, afOth float64, afSas float64) *AlleleFrequency {
	this := AlleleFrequency{}
	this.Af = af
	this.AfAfr = afAfr
	this.AfAmr = afAmr
	this.AfAsj = afAsj
	this.AfEas = afEas
	this.AfFin = afFin
	this.AfNfe = afNfe
	this.AfOth = afOth
	this.AfSas = afSas
	return &this
}

// NewAlleleFrequencyWithDefaults instantiates a new AlleleFrequency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlleleFrequencyWithDefaults() *AlleleFrequency {
	this := AlleleFrequency{}
	return &this
}

// GetAf returns the Af field value
func (o *AlleleFrequency) GetAf() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Af
}

// GetAfOk returns a tuple with the Af field value
// and a boolean to check if the value has been set.
func (o *AlleleFrequency) GetAfOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Af, true
}

// SetAf sets field value
func (o *AlleleFrequency) SetAf(v float64) {
	o.Af = v
}

// GetAfAfr returns the AfAfr field value
func (o *AlleleFrequency) GetAfAfr() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AfAfr
}

// GetAfAfrOk returns a tuple with the AfAfr field value
// and a boolean to check if the value has been set.
func (o *AlleleFrequency) GetAfAfrOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AfAfr, true
}

// SetAfAfr sets field value
func (o *AlleleFrequency) SetAfAfr(v float64) {
	o.AfAfr = v
}

// GetAfAmr returns the AfAmr field value
func (o *AlleleFrequency) GetAfAmr() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AfAmr
}

// GetAfAmrOk returns a tuple with the AfAmr field value
// and a boolean to check if the value has been set.
func (o *AlleleFrequency) GetAfAmrOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AfAmr, true
}

// SetAfAmr sets field value
func (o *AlleleFrequency) SetAfAmr(v float64) {
	o.AfAmr = v
}

// GetAfAsj returns the AfAsj field value
func (o *AlleleFrequency) GetAfAsj() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AfAsj
}

// GetAfAsjOk returns a tuple with the AfAsj field value
// and a boolean to check if the value has been set.
func (o *AlleleFrequency) GetAfAsjOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AfAsj, true
}

// SetAfAsj sets field value
func (o *AlleleFrequency) SetAfAsj(v float64) {
	o.AfAsj = v
}

// GetAfEas returns the AfEas field value
func (o *AlleleFrequency) GetAfEas() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AfEas
}

// GetAfEasOk returns a tuple with the AfEas field value
// and a boolean to check if the value has been set.
func (o *AlleleFrequency) GetAfEasOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AfEas, true
}

// SetAfEas sets field value
func (o *AlleleFrequency) SetAfEas(v float64) {
	o.AfEas = v
}

// GetAfFin returns the AfFin field value
func (o *AlleleFrequency) GetAfFin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AfFin
}

// GetAfFinOk returns a tuple with the AfFin field value
// and a boolean to check if the value has been set.
func (o *AlleleFrequency) GetAfFinOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AfFin, true
}

// SetAfFin sets field value
func (o *AlleleFrequency) SetAfFin(v float64) {
	o.AfFin = v
}

// GetAfNfe returns the AfNfe field value
func (o *AlleleFrequency) GetAfNfe() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AfNfe
}

// GetAfNfeOk returns a tuple with the AfNfe field value
// and a boolean to check if the value has been set.
func (o *AlleleFrequency) GetAfNfeOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AfNfe, true
}

// SetAfNfe sets field value
func (o *AlleleFrequency) SetAfNfe(v float64) {
	o.AfNfe = v
}

// GetAfOth returns the AfOth field value
func (o *AlleleFrequency) GetAfOth() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AfOth
}

// GetAfOthOk returns a tuple with the AfOth field value
// and a boolean to check if the value has been set.
func (o *AlleleFrequency) GetAfOthOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AfOth, true
}

// SetAfOth sets field value
func (o *AlleleFrequency) SetAfOth(v float64) {
	o.AfOth = v
}

// GetAfSas returns the AfSas field value
func (o *AlleleFrequency) GetAfSas() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AfSas
}

// GetAfSasOk returns a tuple with the AfSas field value
// and a boolean to check if the value has been set.
func (o *AlleleFrequency) GetAfSasOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AfSas, true
}

// SetAfSas sets field value
func (o *AlleleFrequency) SetAfSas(v float64) {
	o.AfSas = v
}

func (o AlleleFrequency) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["af"] = o.Af
	}
	if true {
		toSerialize["af_afr"] = o.AfAfr
	}
	if true {
		toSerialize["af_amr"] = o.AfAmr
	}
	if true {
		toSerialize["af_asj"] = o.AfAsj
	}
	if true {
		toSerialize["af_eas"] = o.AfEas
	}
	if true {
		toSerialize["af_fin"] = o.AfFin
	}
	if true {
		toSerialize["af_nfe"] = o.AfNfe
	}
	if true {
		toSerialize["af_oth"] = o.AfOth
	}
	if true {
		toSerialize["af_sas"] = o.AfSas
	}
	return json.Marshal(toSerialize)
}

type NullableAlleleFrequency struct {
	value *AlleleFrequency
	isSet bool
}

func (v NullableAlleleFrequency) Get() *AlleleFrequency {
	return v.value
}

func (v *NullableAlleleFrequency) Set(val *AlleleFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableAlleleFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableAlleleFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlleleFrequency(val *AlleleFrequency) *NullableAlleleFrequency {
	return &NullableAlleleFrequency{value: val, isSet: true}
}

func (v NullableAlleleFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlleleFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


