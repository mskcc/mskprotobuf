/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// VariantAnnotation struct for VariantAnnotation
type VariantAnnotation struct {
	// Allele string (e.g: A/T)
	AlleleString *string `json:"allele_string,omitempty"`
	// Annotation data as JSON string
	AnnotationJSON *string `json:"annotationJSON,omitempty"`
	AnnotationSummary *VariantAnnotationSummary `json:"annotation_summary,omitempty"`
	// NCBI build number
	AssemblyName *string `json:"assembly_name,omitempty"`
	Clinvar *ClinvarAnnotation `json:"clinvar,omitempty"`
	ColocatedVariants []ColocatedVariant `json:"colocatedVariants,omitempty"`
	// End position
	End *int32 `json:"end,omitempty"`
	Hgvsg *string `json:"hgvsg,omitempty"`
	Hotspots *HotspotAnnotation `json:"hotspots,omitempty"`
	// Variant id
	Id string `json:"id"`
	// intergenicConsequences
	IntergenicConsequences []IntergenicConsequences `json:"intergenic_consequences"`
	// Most severe consequence
	MostSevereConsequence *string `json:"most_severe_consequence,omitempty"`
	MutationAssessor *MutationAssessorAnnotation `json:"mutation_assessor,omitempty"`
	MyVariantInfo *MyVariantInfoAnnotation `json:"my_variant_info,omitempty"`
	NucleotideContext *NucleotideContextAnnotation `json:"nucleotide_context,omitempty"`
	Oncokb *OncokbAnnotation `json:"oncokb,omitempty"`
	// Original variant query
	OriginalVariantQuery string `json:"originalVariantQuery"`
	Ptms *PtmAnnotation `json:"ptms,omitempty"`
	// Chromosome
	SeqRegionName *string `json:"seq_region_name,omitempty"`
	SignalAnnotation *SignalAnnotation `json:"signalAnnotation,omitempty"`
	// Start position
	Start *int32 `json:"start,omitempty"`
	// Strand (negative or positive)
	Strand *int32 `json:"strand,omitempty"`
	// Status flag indicating whether variant was succesfully annotated
	SuccessfullyAnnotated *bool `json:"successfully_annotated,omitempty"`
	// List of transcripts
	TranscriptConsequences []TranscriptConsequence `json:"transcript_consequences,omitempty"`
	// Variant key
	Variant string `json:"variant"`
}

// NewVariantAnnotation instantiates a new VariantAnnotation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariantAnnotation(id string, intergenicConsequences []IntergenicConsequences, originalVariantQuery string, variant string) *VariantAnnotation {
	this := VariantAnnotation{}
	this.Id = id
	this.IntergenicConsequences = intergenicConsequences
	this.OriginalVariantQuery = originalVariantQuery
	this.Variant = variant
	return &this
}

// NewVariantAnnotationWithDefaults instantiates a new VariantAnnotation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariantAnnotationWithDefaults() *VariantAnnotation {
	this := VariantAnnotation{}
	return &this
}

// GetAlleleString returns the AlleleString field value if set, zero value otherwise.
func (o *VariantAnnotation) GetAlleleString() string {
	if o == nil || isNil(o.AlleleString) {
		var ret string
		return ret
	}
	return *o.AlleleString
}

// GetAlleleStringOk returns a tuple with the AlleleString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetAlleleStringOk() (*string, bool) {
	if o == nil || isNil(o.AlleleString) {
    return nil, false
	}
	return o.AlleleString, true
}

// HasAlleleString returns a boolean if a field has been set.
func (o *VariantAnnotation) HasAlleleString() bool {
	if o != nil && !isNil(o.AlleleString) {
		return true
	}

	return false
}

// SetAlleleString gets a reference to the given string and assigns it to the AlleleString field.
func (o *VariantAnnotation) SetAlleleString(v string) {
	o.AlleleString = &v
}

// GetAnnotationJSON returns the AnnotationJSON field value if set, zero value otherwise.
func (o *VariantAnnotation) GetAnnotationJSON() string {
	if o == nil || isNil(o.AnnotationJSON) {
		var ret string
		return ret
	}
	return *o.AnnotationJSON
}

// GetAnnotationJSONOk returns a tuple with the AnnotationJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetAnnotationJSONOk() (*string, bool) {
	if o == nil || isNil(o.AnnotationJSON) {
    return nil, false
	}
	return o.AnnotationJSON, true
}

// HasAnnotationJSON returns a boolean if a field has been set.
func (o *VariantAnnotation) HasAnnotationJSON() bool {
	if o != nil && !isNil(o.AnnotationJSON) {
		return true
	}

	return false
}

// SetAnnotationJSON gets a reference to the given string and assigns it to the AnnotationJSON field.
func (o *VariantAnnotation) SetAnnotationJSON(v string) {
	o.AnnotationJSON = &v
}

// GetAnnotationSummary returns the AnnotationSummary field value if set, zero value otherwise.
func (o *VariantAnnotation) GetAnnotationSummary() VariantAnnotationSummary {
	if o == nil || isNil(o.AnnotationSummary) {
		var ret VariantAnnotationSummary
		return ret
	}
	return *o.AnnotationSummary
}

// GetAnnotationSummaryOk returns a tuple with the AnnotationSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetAnnotationSummaryOk() (*VariantAnnotationSummary, bool) {
	if o == nil || isNil(o.AnnotationSummary) {
    return nil, false
	}
	return o.AnnotationSummary, true
}

// HasAnnotationSummary returns a boolean if a field has been set.
func (o *VariantAnnotation) HasAnnotationSummary() bool {
	if o != nil && !isNil(o.AnnotationSummary) {
		return true
	}

	return false
}

// SetAnnotationSummary gets a reference to the given VariantAnnotationSummary and assigns it to the AnnotationSummary field.
func (o *VariantAnnotation) SetAnnotationSummary(v VariantAnnotationSummary) {
	o.AnnotationSummary = &v
}

// GetAssemblyName returns the AssemblyName field value if set, zero value otherwise.
func (o *VariantAnnotation) GetAssemblyName() string {
	if o == nil || isNil(o.AssemblyName) {
		var ret string
		return ret
	}
	return *o.AssemblyName
}

// GetAssemblyNameOk returns a tuple with the AssemblyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetAssemblyNameOk() (*string, bool) {
	if o == nil || isNil(o.AssemblyName) {
    return nil, false
	}
	return o.AssemblyName, true
}

// HasAssemblyName returns a boolean if a field has been set.
func (o *VariantAnnotation) HasAssemblyName() bool {
	if o != nil && !isNil(o.AssemblyName) {
		return true
	}

	return false
}

// SetAssemblyName gets a reference to the given string and assigns it to the AssemblyName field.
func (o *VariantAnnotation) SetAssemblyName(v string) {
	o.AssemblyName = &v
}

// GetClinvar returns the Clinvar field value if set, zero value otherwise.
func (o *VariantAnnotation) GetClinvar() ClinvarAnnotation {
	if o == nil || isNil(o.Clinvar) {
		var ret ClinvarAnnotation
		return ret
	}
	return *o.Clinvar
}

// GetClinvarOk returns a tuple with the Clinvar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetClinvarOk() (*ClinvarAnnotation, bool) {
	if o == nil || isNil(o.Clinvar) {
    return nil, false
	}
	return o.Clinvar, true
}

// HasClinvar returns a boolean if a field has been set.
func (o *VariantAnnotation) HasClinvar() bool {
	if o != nil && !isNil(o.Clinvar) {
		return true
	}

	return false
}

// SetClinvar gets a reference to the given ClinvarAnnotation and assigns it to the Clinvar field.
func (o *VariantAnnotation) SetClinvar(v ClinvarAnnotation) {
	o.Clinvar = &v
}

// GetColocatedVariants returns the ColocatedVariants field value if set, zero value otherwise.
func (o *VariantAnnotation) GetColocatedVariants() []ColocatedVariant {
	if o == nil || isNil(o.ColocatedVariants) {
		var ret []ColocatedVariant
		return ret
	}
	return o.ColocatedVariants
}

// GetColocatedVariantsOk returns a tuple with the ColocatedVariants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetColocatedVariantsOk() ([]ColocatedVariant, bool) {
	if o == nil || isNil(o.ColocatedVariants) {
    return nil, false
	}
	return o.ColocatedVariants, true
}

// HasColocatedVariants returns a boolean if a field has been set.
func (o *VariantAnnotation) HasColocatedVariants() bool {
	if o != nil && !isNil(o.ColocatedVariants) {
		return true
	}

	return false
}

// SetColocatedVariants gets a reference to the given []ColocatedVariant and assigns it to the ColocatedVariants field.
func (o *VariantAnnotation) SetColocatedVariants(v []ColocatedVariant) {
	o.ColocatedVariants = v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *VariantAnnotation) GetEnd() int32 {
	if o == nil || isNil(o.End) {
		var ret int32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetEndOk() (*int32, bool) {
	if o == nil || isNil(o.End) {
    return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *VariantAnnotation) HasEnd() bool {
	if o != nil && !isNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int32 and assigns it to the End field.
func (o *VariantAnnotation) SetEnd(v int32) {
	o.End = &v
}

// GetHgvsg returns the Hgvsg field value if set, zero value otherwise.
func (o *VariantAnnotation) GetHgvsg() string {
	if o == nil || isNil(o.Hgvsg) {
		var ret string
		return ret
	}
	return *o.Hgvsg
}

// GetHgvsgOk returns a tuple with the Hgvsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetHgvsgOk() (*string, bool) {
	if o == nil || isNil(o.Hgvsg) {
    return nil, false
	}
	return o.Hgvsg, true
}

// HasHgvsg returns a boolean if a field has been set.
func (o *VariantAnnotation) HasHgvsg() bool {
	if o != nil && !isNil(o.Hgvsg) {
		return true
	}

	return false
}

// SetHgvsg gets a reference to the given string and assigns it to the Hgvsg field.
func (o *VariantAnnotation) SetHgvsg(v string) {
	o.Hgvsg = &v
}

// GetHotspots returns the Hotspots field value if set, zero value otherwise.
func (o *VariantAnnotation) GetHotspots() HotspotAnnotation {
	if o == nil || isNil(o.Hotspots) {
		var ret HotspotAnnotation
		return ret
	}
	return *o.Hotspots
}

// GetHotspotsOk returns a tuple with the Hotspots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetHotspotsOk() (*HotspotAnnotation, bool) {
	if o == nil || isNil(o.Hotspots) {
    return nil, false
	}
	return o.Hotspots, true
}

// HasHotspots returns a boolean if a field has been set.
func (o *VariantAnnotation) HasHotspots() bool {
	if o != nil && !isNil(o.Hotspots) {
		return true
	}

	return false
}

// SetHotspots gets a reference to the given HotspotAnnotation and assigns it to the Hotspots field.
func (o *VariantAnnotation) SetHotspots(v HotspotAnnotation) {
	o.Hotspots = &v
}

// GetId returns the Id field value
func (o *VariantAnnotation) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VariantAnnotation) SetId(v string) {
	o.Id = v
}

// GetIntergenicConsequences returns the IntergenicConsequences field value
func (o *VariantAnnotation) GetIntergenicConsequences() []IntergenicConsequences {
	if o == nil {
		var ret []IntergenicConsequences
		return ret
	}

	return o.IntergenicConsequences
}

// GetIntergenicConsequencesOk returns a tuple with the IntergenicConsequences field value
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetIntergenicConsequencesOk() ([]IntergenicConsequences, bool) {
	if o == nil {
    return nil, false
	}
	return o.IntergenicConsequences, true
}

// SetIntergenicConsequences sets field value
func (o *VariantAnnotation) SetIntergenicConsequences(v []IntergenicConsequences) {
	o.IntergenicConsequences = v
}

// GetMostSevereConsequence returns the MostSevereConsequence field value if set, zero value otherwise.
func (o *VariantAnnotation) GetMostSevereConsequence() string {
	if o == nil || isNil(o.MostSevereConsequence) {
		var ret string
		return ret
	}
	return *o.MostSevereConsequence
}

// GetMostSevereConsequenceOk returns a tuple with the MostSevereConsequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetMostSevereConsequenceOk() (*string, bool) {
	if o == nil || isNil(o.MostSevereConsequence) {
    return nil, false
	}
	return o.MostSevereConsequence, true
}

// HasMostSevereConsequence returns a boolean if a field has been set.
func (o *VariantAnnotation) HasMostSevereConsequence() bool {
	if o != nil && !isNil(o.MostSevereConsequence) {
		return true
	}

	return false
}

// SetMostSevereConsequence gets a reference to the given string and assigns it to the MostSevereConsequence field.
func (o *VariantAnnotation) SetMostSevereConsequence(v string) {
	o.MostSevereConsequence = &v
}

// GetMutationAssessor returns the MutationAssessor field value if set, zero value otherwise.
func (o *VariantAnnotation) GetMutationAssessor() MutationAssessorAnnotation {
	if o == nil || isNil(o.MutationAssessor) {
		var ret MutationAssessorAnnotation
		return ret
	}
	return *o.MutationAssessor
}

// GetMutationAssessorOk returns a tuple with the MutationAssessor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetMutationAssessorOk() (*MutationAssessorAnnotation, bool) {
	if o == nil || isNil(o.MutationAssessor) {
    return nil, false
	}
	return o.MutationAssessor, true
}

// HasMutationAssessor returns a boolean if a field has been set.
func (o *VariantAnnotation) HasMutationAssessor() bool {
	if o != nil && !isNil(o.MutationAssessor) {
		return true
	}

	return false
}

// SetMutationAssessor gets a reference to the given MutationAssessorAnnotation and assigns it to the MutationAssessor field.
func (o *VariantAnnotation) SetMutationAssessor(v MutationAssessorAnnotation) {
	o.MutationAssessor = &v
}

// GetMyVariantInfo returns the MyVariantInfo field value if set, zero value otherwise.
func (o *VariantAnnotation) GetMyVariantInfo() MyVariantInfoAnnotation {
	if o == nil || isNil(o.MyVariantInfo) {
		var ret MyVariantInfoAnnotation
		return ret
	}
	return *o.MyVariantInfo
}

// GetMyVariantInfoOk returns a tuple with the MyVariantInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetMyVariantInfoOk() (*MyVariantInfoAnnotation, bool) {
	if o == nil || isNil(o.MyVariantInfo) {
    return nil, false
	}
	return o.MyVariantInfo, true
}

// HasMyVariantInfo returns a boolean if a field has been set.
func (o *VariantAnnotation) HasMyVariantInfo() bool {
	if o != nil && !isNil(o.MyVariantInfo) {
		return true
	}

	return false
}

// SetMyVariantInfo gets a reference to the given MyVariantInfoAnnotation and assigns it to the MyVariantInfo field.
func (o *VariantAnnotation) SetMyVariantInfo(v MyVariantInfoAnnotation) {
	o.MyVariantInfo = &v
}

// GetNucleotideContext returns the NucleotideContext field value if set, zero value otherwise.
func (o *VariantAnnotation) GetNucleotideContext() NucleotideContextAnnotation {
	if o == nil || isNil(o.NucleotideContext) {
		var ret NucleotideContextAnnotation
		return ret
	}
	return *o.NucleotideContext
}

// GetNucleotideContextOk returns a tuple with the NucleotideContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetNucleotideContextOk() (*NucleotideContextAnnotation, bool) {
	if o == nil || isNil(o.NucleotideContext) {
    return nil, false
	}
	return o.NucleotideContext, true
}

// HasNucleotideContext returns a boolean if a field has been set.
func (o *VariantAnnotation) HasNucleotideContext() bool {
	if o != nil && !isNil(o.NucleotideContext) {
		return true
	}

	return false
}

// SetNucleotideContext gets a reference to the given NucleotideContextAnnotation and assigns it to the NucleotideContext field.
func (o *VariantAnnotation) SetNucleotideContext(v NucleotideContextAnnotation) {
	o.NucleotideContext = &v
}

// GetOncokb returns the Oncokb field value if set, zero value otherwise.
func (o *VariantAnnotation) GetOncokb() OncokbAnnotation {
	if o == nil || isNil(o.Oncokb) {
		var ret OncokbAnnotation
		return ret
	}
	return *o.Oncokb
}

// GetOncokbOk returns a tuple with the Oncokb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetOncokbOk() (*OncokbAnnotation, bool) {
	if o == nil || isNil(o.Oncokb) {
    return nil, false
	}
	return o.Oncokb, true
}

// HasOncokb returns a boolean if a field has been set.
func (o *VariantAnnotation) HasOncokb() bool {
	if o != nil && !isNil(o.Oncokb) {
		return true
	}

	return false
}

// SetOncokb gets a reference to the given OncokbAnnotation and assigns it to the Oncokb field.
func (o *VariantAnnotation) SetOncokb(v OncokbAnnotation) {
	o.Oncokb = &v
}

// GetOriginalVariantQuery returns the OriginalVariantQuery field value
func (o *VariantAnnotation) GetOriginalVariantQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalVariantQuery
}

// GetOriginalVariantQueryOk returns a tuple with the OriginalVariantQuery field value
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetOriginalVariantQueryOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OriginalVariantQuery, true
}

// SetOriginalVariantQuery sets field value
func (o *VariantAnnotation) SetOriginalVariantQuery(v string) {
	o.OriginalVariantQuery = v
}

// GetPtms returns the Ptms field value if set, zero value otherwise.
func (o *VariantAnnotation) GetPtms() PtmAnnotation {
	if o == nil || isNil(o.Ptms) {
		var ret PtmAnnotation
		return ret
	}
	return *o.Ptms
}

// GetPtmsOk returns a tuple with the Ptms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetPtmsOk() (*PtmAnnotation, bool) {
	if o == nil || isNil(o.Ptms) {
    return nil, false
	}
	return o.Ptms, true
}

// HasPtms returns a boolean if a field has been set.
func (o *VariantAnnotation) HasPtms() bool {
	if o != nil && !isNil(o.Ptms) {
		return true
	}

	return false
}

// SetPtms gets a reference to the given PtmAnnotation and assigns it to the Ptms field.
func (o *VariantAnnotation) SetPtms(v PtmAnnotation) {
	o.Ptms = &v
}

// GetSeqRegionName returns the SeqRegionName field value if set, zero value otherwise.
func (o *VariantAnnotation) GetSeqRegionName() string {
	if o == nil || isNil(o.SeqRegionName) {
		var ret string
		return ret
	}
	return *o.SeqRegionName
}

// GetSeqRegionNameOk returns a tuple with the SeqRegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetSeqRegionNameOk() (*string, bool) {
	if o == nil || isNil(o.SeqRegionName) {
    return nil, false
	}
	return o.SeqRegionName, true
}

// HasSeqRegionName returns a boolean if a field has been set.
func (o *VariantAnnotation) HasSeqRegionName() bool {
	if o != nil && !isNil(o.SeqRegionName) {
		return true
	}

	return false
}

// SetSeqRegionName gets a reference to the given string and assigns it to the SeqRegionName field.
func (o *VariantAnnotation) SetSeqRegionName(v string) {
	o.SeqRegionName = &v
}

// GetSignalAnnotation returns the SignalAnnotation field value if set, zero value otherwise.
func (o *VariantAnnotation) GetSignalAnnotation() SignalAnnotation {
	if o == nil || isNil(o.SignalAnnotation) {
		var ret SignalAnnotation
		return ret
	}
	return *o.SignalAnnotation
}

// GetSignalAnnotationOk returns a tuple with the SignalAnnotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetSignalAnnotationOk() (*SignalAnnotation, bool) {
	if o == nil || isNil(o.SignalAnnotation) {
    return nil, false
	}
	return o.SignalAnnotation, true
}

// HasSignalAnnotation returns a boolean if a field has been set.
func (o *VariantAnnotation) HasSignalAnnotation() bool {
	if o != nil && !isNil(o.SignalAnnotation) {
		return true
	}

	return false
}

// SetSignalAnnotation gets a reference to the given SignalAnnotation and assigns it to the SignalAnnotation field.
func (o *VariantAnnotation) SetSignalAnnotation(v SignalAnnotation) {
	o.SignalAnnotation = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *VariantAnnotation) GetStart() int32 {
	if o == nil || isNil(o.Start) {
		var ret int32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetStartOk() (*int32, bool) {
	if o == nil || isNil(o.Start) {
    return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *VariantAnnotation) HasStart() bool {
	if o != nil && !isNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int32 and assigns it to the Start field.
func (o *VariantAnnotation) SetStart(v int32) {
	o.Start = &v
}

// GetStrand returns the Strand field value if set, zero value otherwise.
func (o *VariantAnnotation) GetStrand() int32 {
	if o == nil || isNil(o.Strand) {
		var ret int32
		return ret
	}
	return *o.Strand
}

// GetStrandOk returns a tuple with the Strand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetStrandOk() (*int32, bool) {
	if o == nil || isNil(o.Strand) {
    return nil, false
	}
	return o.Strand, true
}

// HasStrand returns a boolean if a field has been set.
func (o *VariantAnnotation) HasStrand() bool {
	if o != nil && !isNil(o.Strand) {
		return true
	}

	return false
}

// SetStrand gets a reference to the given int32 and assigns it to the Strand field.
func (o *VariantAnnotation) SetStrand(v int32) {
	o.Strand = &v
}

// GetSuccessfullyAnnotated returns the SuccessfullyAnnotated field value if set, zero value otherwise.
func (o *VariantAnnotation) GetSuccessfullyAnnotated() bool {
	if o == nil || isNil(o.SuccessfullyAnnotated) {
		var ret bool
		return ret
	}
	return *o.SuccessfullyAnnotated
}

// GetSuccessfullyAnnotatedOk returns a tuple with the SuccessfullyAnnotated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetSuccessfullyAnnotatedOk() (*bool, bool) {
	if o == nil || isNil(o.SuccessfullyAnnotated) {
    return nil, false
	}
	return o.SuccessfullyAnnotated, true
}

// HasSuccessfullyAnnotated returns a boolean if a field has been set.
func (o *VariantAnnotation) HasSuccessfullyAnnotated() bool {
	if o != nil && !isNil(o.SuccessfullyAnnotated) {
		return true
	}

	return false
}

// SetSuccessfullyAnnotated gets a reference to the given bool and assigns it to the SuccessfullyAnnotated field.
func (o *VariantAnnotation) SetSuccessfullyAnnotated(v bool) {
	o.SuccessfullyAnnotated = &v
}

// GetTranscriptConsequences returns the TranscriptConsequences field value if set, zero value otherwise.
func (o *VariantAnnotation) GetTranscriptConsequences() []TranscriptConsequence {
	if o == nil || isNil(o.TranscriptConsequences) {
		var ret []TranscriptConsequence
		return ret
	}
	return o.TranscriptConsequences
}

// GetTranscriptConsequencesOk returns a tuple with the TranscriptConsequences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetTranscriptConsequencesOk() ([]TranscriptConsequence, bool) {
	if o == nil || isNil(o.TranscriptConsequences) {
    return nil, false
	}
	return o.TranscriptConsequences, true
}

// HasTranscriptConsequences returns a boolean if a field has been set.
func (o *VariantAnnotation) HasTranscriptConsequences() bool {
	if o != nil && !isNil(o.TranscriptConsequences) {
		return true
	}

	return false
}

// SetTranscriptConsequences gets a reference to the given []TranscriptConsequence and assigns it to the TranscriptConsequences field.
func (o *VariantAnnotation) SetTranscriptConsequences(v []TranscriptConsequence) {
	o.TranscriptConsequences = v
}

// GetVariant returns the Variant field value
func (o *VariantAnnotation) GetVariant() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Variant
}

// GetVariantOk returns a tuple with the Variant field value
// and a boolean to check if the value has been set.
func (o *VariantAnnotation) GetVariantOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Variant, true
}

// SetVariant sets field value
func (o *VariantAnnotation) SetVariant(v string) {
	o.Variant = v
}

func (o VariantAnnotation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AlleleString) {
		toSerialize["allele_string"] = o.AlleleString
	}
	if !isNil(o.AnnotationJSON) {
		toSerialize["annotationJSON"] = o.AnnotationJSON
	}
	if !isNil(o.AnnotationSummary) {
		toSerialize["annotation_summary"] = o.AnnotationSummary
	}
	if !isNil(o.AssemblyName) {
		toSerialize["assembly_name"] = o.AssemblyName
	}
	if !isNil(o.Clinvar) {
		toSerialize["clinvar"] = o.Clinvar
	}
	if !isNil(o.ColocatedVariants) {
		toSerialize["colocatedVariants"] = o.ColocatedVariants
	}
	if !isNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !isNil(o.Hgvsg) {
		toSerialize["hgvsg"] = o.Hgvsg
	}
	if !isNil(o.Hotspots) {
		toSerialize["hotspots"] = o.Hotspots
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["intergenic_consequences"] = o.IntergenicConsequences
	}
	if !isNil(o.MostSevereConsequence) {
		toSerialize["most_severe_consequence"] = o.MostSevereConsequence
	}
	if !isNil(o.MutationAssessor) {
		toSerialize["mutation_assessor"] = o.MutationAssessor
	}
	if !isNil(o.MyVariantInfo) {
		toSerialize["my_variant_info"] = o.MyVariantInfo
	}
	if !isNil(o.NucleotideContext) {
		toSerialize["nucleotide_context"] = o.NucleotideContext
	}
	if !isNil(o.Oncokb) {
		toSerialize["oncokb"] = o.Oncokb
	}
	if true {
		toSerialize["originalVariantQuery"] = o.OriginalVariantQuery
	}
	if !isNil(o.Ptms) {
		toSerialize["ptms"] = o.Ptms
	}
	if !isNil(o.SeqRegionName) {
		toSerialize["seq_region_name"] = o.SeqRegionName
	}
	if !isNil(o.SignalAnnotation) {
		toSerialize["signalAnnotation"] = o.SignalAnnotation
	}
	if !isNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !isNil(o.Strand) {
		toSerialize["strand"] = o.Strand
	}
	if !isNil(o.SuccessfullyAnnotated) {
		toSerialize["successfully_annotated"] = o.SuccessfullyAnnotated
	}
	if !isNil(o.TranscriptConsequences) {
		toSerialize["transcript_consequences"] = o.TranscriptConsequences
	}
	if true {
		toSerialize["variant"] = o.Variant
	}
	return json.Marshal(toSerialize)
}

type NullableVariantAnnotation struct {
	value *VariantAnnotation
	isSet bool
}

func (v NullableVariantAnnotation) Get() *VariantAnnotation {
	return v.value
}

func (v *NullableVariantAnnotation) Set(val *VariantAnnotation) {
	v.value = val
	v.isSet = true
}

func (v NullableVariantAnnotation) IsSet() bool {
	return v.isSet
}

func (v *NullableVariantAnnotation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariantAnnotation(val *VariantAnnotation) *NullableVariantAnnotation {
	return &NullableVariantAnnotation{value: val, isSet: true}
}

func (v NullableVariantAnnotation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariantAnnotation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


