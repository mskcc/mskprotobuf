/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// HotspotAnnotation struct for HotspotAnnotation
type HotspotAnnotation struct {
	Annotation [][]Hotspot `json:"annotation,omitempty"`
	License *string `json:"license,omitempty"`
}

// NewHotspotAnnotation instantiates a new HotspotAnnotation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotspotAnnotation() *HotspotAnnotation {
	this := HotspotAnnotation{}
	return &this
}

// NewHotspotAnnotationWithDefaults instantiates a new HotspotAnnotation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotspotAnnotationWithDefaults() *HotspotAnnotation {
	this := HotspotAnnotation{}
	return &this
}

// GetAnnotation returns the Annotation field value if set, zero value otherwise.
func (o *HotspotAnnotation) GetAnnotation() [][]Hotspot {
	if o == nil || isNil(o.Annotation) {
		var ret [][]Hotspot
		return ret
	}
	return o.Annotation
}

// GetAnnotationOk returns a tuple with the Annotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotspotAnnotation) GetAnnotationOk() ([][]Hotspot, bool) {
	if o == nil || isNil(o.Annotation) {
    return nil, false
	}
	return o.Annotation, true
}

// HasAnnotation returns a boolean if a field has been set.
func (o *HotspotAnnotation) HasAnnotation() bool {
	if o != nil && !isNil(o.Annotation) {
		return true
	}

	return false
}

// SetAnnotation gets a reference to the given [][]Hotspot and assigns it to the Annotation field.
func (o *HotspotAnnotation) SetAnnotation(v [][]Hotspot) {
	o.Annotation = v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *HotspotAnnotation) GetLicense() string {
	if o == nil || isNil(o.License) {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotspotAnnotation) GetLicenseOk() (*string, bool) {
	if o == nil || isNil(o.License) {
    return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *HotspotAnnotation) HasLicense() bool {
	if o != nil && !isNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *HotspotAnnotation) SetLicense(v string) {
	o.License = &v
}

func (o HotspotAnnotation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Annotation) {
		toSerialize["annotation"] = o.Annotation
	}
	if !isNil(o.License) {
		toSerialize["license"] = o.License
	}
	return json.Marshal(toSerialize)
}

type NullableHotspotAnnotation struct {
	value *HotspotAnnotation
	isSet bool
}

func (v NullableHotspotAnnotation) Get() *HotspotAnnotation {
	return v.value
}

func (v *NullableHotspotAnnotation) Set(val *HotspotAnnotation) {
	v.value = val
	v.isSet = true
}

func (v NullableHotspotAnnotation) IsSet() bool {
	return v.isSet
}

func (v *NullableHotspotAnnotation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotspotAnnotation(val *HotspotAnnotation) *NullableHotspotAnnotation {
	return &NullableHotspotAnnotation{value: val, isSet: true}
}

func (v NullableHotspotAnnotation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotspotAnnotation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


