/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// Exon struct for Exon
type Exon struct {
	// Exon id
	ExonId string `json:"exonId"`
	// Start position of exon
	ExonStart int32 `json:"exonStart"`
	// End position of exon
	ExonEnd int32 `json:"exonEnd"`
	// Number of exon in transcript
	Rank int32 `json:"rank"`
	// Strand exon is on, -1 for - and 1 for +
	Strand int32 `json:"strand"`
	// Exon version
	Version int32 `json:"version"`
}

// NewExon instantiates a new Exon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExon(exonId string, exonStart int32, exonEnd int32, rank int32, strand int32, version int32) *Exon {
	this := Exon{}
	this.ExonId = exonId
	this.ExonStart = exonStart
	this.ExonEnd = exonEnd
	this.Rank = rank
	this.Strand = strand
	this.Version = version
	return &this
}

// NewExonWithDefaults instantiates a new Exon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExonWithDefaults() *Exon {
	this := Exon{}
	return &this
}

// GetExonId returns the ExonId field value
func (o *Exon) GetExonId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExonId
}

// GetExonIdOk returns a tuple with the ExonId field value
// and a boolean to check if the value has been set.
func (o *Exon) GetExonIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ExonId, true
}

// SetExonId sets field value
func (o *Exon) SetExonId(v string) {
	o.ExonId = v
}

// GetExonStart returns the ExonStart field value
func (o *Exon) GetExonStart() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExonStart
}

// GetExonStartOk returns a tuple with the ExonStart field value
// and a boolean to check if the value has been set.
func (o *Exon) GetExonStartOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ExonStart, true
}

// SetExonStart sets field value
func (o *Exon) SetExonStart(v int32) {
	o.ExonStart = v
}

// GetExonEnd returns the ExonEnd field value
func (o *Exon) GetExonEnd() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExonEnd
}

// GetExonEndOk returns a tuple with the ExonEnd field value
// and a boolean to check if the value has been set.
func (o *Exon) GetExonEndOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ExonEnd, true
}

// SetExonEnd sets field value
func (o *Exon) SetExonEnd(v int32) {
	o.ExonEnd = v
}

// GetRank returns the Rank field value
func (o *Exon) GetRank() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rank
}

// GetRankOk returns a tuple with the Rank field value
// and a boolean to check if the value has been set.
func (o *Exon) GetRankOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Rank, true
}

// SetRank sets field value
func (o *Exon) SetRank(v int32) {
	o.Rank = v
}

// GetStrand returns the Strand field value
func (o *Exon) GetStrand() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Strand
}

// GetStrandOk returns a tuple with the Strand field value
// and a boolean to check if the value has been set.
func (o *Exon) GetStrandOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Strand, true
}

// SetStrand sets field value
func (o *Exon) SetStrand(v int32) {
	o.Strand = v
}

// GetVersion returns the Version field value
func (o *Exon) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Exon) GetVersionOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Exon) SetVersion(v int32) {
	o.Version = v
}

func (o Exon) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["exonId"] = o.ExonId
	}
	if true {
		toSerialize["exonStart"] = o.ExonStart
	}
	if true {
		toSerialize["exonEnd"] = o.ExonEnd
	}
	if true {
		toSerialize["rank"] = o.Rank
	}
	if true {
		toSerialize["strand"] = o.Strand
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableExon struct {
	value *Exon
	isSet bool
}

func (v NullableExon) Get() *Exon {
	return v.value
}

func (v *NullableExon) Set(val *Exon) {
	v.value = val
	v.isSet = true
}

func (v NullableExon) IsSet() bool {
	return v.isSet
}

func (v *NullableExon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExon(val *Exon) *NullableExon {
	return &NullableExon{value: val, isSet: true}
}

func (v NullableExon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


