/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// UntranslatedRegion struct for UntranslatedRegion
type UntranslatedRegion struct {
	// UTR Type
	Type string `json:"type"`
	// Start position of UTR
	Start int32 `json:"start"`
	// End position of UTR
	End int32 `json:"end"`
	// Strand UTR is on, -1 for - and 1 for +
	Strand int32 `json:"strand"`
}

// NewUntranslatedRegion instantiates a new UntranslatedRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUntranslatedRegion(type_ string, start int32, end int32, strand int32) *UntranslatedRegion {
	this := UntranslatedRegion{}
	this.Type = type_
	this.Start = start
	this.End = end
	this.Strand = strand
	return &this
}

// NewUntranslatedRegionWithDefaults instantiates a new UntranslatedRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUntranslatedRegionWithDefaults() *UntranslatedRegion {
	this := UntranslatedRegion{}
	return &this
}

// GetType returns the Type field value
func (o *UntranslatedRegion) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UntranslatedRegion) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UntranslatedRegion) SetType(v string) {
	o.Type = v
}

// GetStart returns the Start field value
func (o *UntranslatedRegion) GetStart() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *UntranslatedRegion) GetStartOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *UntranslatedRegion) SetStart(v int32) {
	o.Start = v
}

// GetEnd returns the End field value
func (o *UntranslatedRegion) GetEnd() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *UntranslatedRegion) GetEndOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *UntranslatedRegion) SetEnd(v int32) {
	o.End = v
}

// GetStrand returns the Strand field value
func (o *UntranslatedRegion) GetStrand() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Strand
}

// GetStrandOk returns a tuple with the Strand field value
// and a boolean to check if the value has been set.
func (o *UntranslatedRegion) GetStrandOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Strand, true
}

// SetStrand sets field value
func (o *UntranslatedRegion) SetStrand(v int32) {
	o.Strand = v
}

func (o UntranslatedRegion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["start"] = o.Start
	}
	if true {
		toSerialize["end"] = o.End
	}
	if true {
		toSerialize["strand"] = o.Strand
	}
	return json.Marshal(toSerialize)
}

type NullableUntranslatedRegion struct {
	value *UntranslatedRegion
	isSet bool
}

func (v NullableUntranslatedRegion) Get() *UntranslatedRegion {
	return v.value
}

func (v *NullableUntranslatedRegion) Set(val *UntranslatedRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableUntranslatedRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableUntranslatedRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUntranslatedRegion(val *UntranslatedRegion) *NullableUntranslatedRegion {
	return &NullableUntranslatedRegion{value: val, isSet: true}
}

func (v NullableUntranslatedRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUntranslatedRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


