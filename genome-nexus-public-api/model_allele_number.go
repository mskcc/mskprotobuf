/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// AlleleNumber struct for AlleleNumber
type AlleleNumber struct {
	An int32 `json:"an"`
	AnAfr int32 `json:"an_afr"`
	AnAmr int32 `json:"an_amr"`
	AnAsj int32 `json:"an_asj"`
	AnEas int32 `json:"an_eas"`
	AnFin int32 `json:"an_fin"`
	AnNfe int32 `json:"an_nfe"`
	AnOth int32 `json:"an_oth"`
	AnSas int32 `json:"an_sas"`
}

// NewAlleleNumber instantiates a new AlleleNumber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlleleNumber(an int32, anAfr int32, anAmr int32, anAsj int32, anEas int32, anFin int32, anNfe int32, anOth int32, anSas int32) *AlleleNumber {
	this := AlleleNumber{}
	this.An = an
	this.AnAfr = anAfr
	this.AnAmr = anAmr
	this.AnAsj = anAsj
	this.AnEas = anEas
	this.AnFin = anFin
	this.AnNfe = anNfe
	this.AnOth = anOth
	this.AnSas = anSas
	return &this
}

// NewAlleleNumberWithDefaults instantiates a new AlleleNumber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlleleNumberWithDefaults() *AlleleNumber {
	this := AlleleNumber{}
	return &this
}

// GetAn returns the An field value
func (o *AlleleNumber) GetAn() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.An
}

// GetAnOk returns a tuple with the An field value
// and a boolean to check if the value has been set.
func (o *AlleleNumber) GetAnOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.An, true
}

// SetAn sets field value
func (o *AlleleNumber) SetAn(v int32) {
	o.An = v
}

// GetAnAfr returns the AnAfr field value
func (o *AlleleNumber) GetAnAfr() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AnAfr
}

// GetAnAfrOk returns a tuple with the AnAfr field value
// and a boolean to check if the value has been set.
func (o *AlleleNumber) GetAnAfrOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AnAfr, true
}

// SetAnAfr sets field value
func (o *AlleleNumber) SetAnAfr(v int32) {
	o.AnAfr = v
}

// GetAnAmr returns the AnAmr field value
func (o *AlleleNumber) GetAnAmr() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AnAmr
}

// GetAnAmrOk returns a tuple with the AnAmr field value
// and a boolean to check if the value has been set.
func (o *AlleleNumber) GetAnAmrOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AnAmr, true
}

// SetAnAmr sets field value
func (o *AlleleNumber) SetAnAmr(v int32) {
	o.AnAmr = v
}

// GetAnAsj returns the AnAsj field value
func (o *AlleleNumber) GetAnAsj() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AnAsj
}

// GetAnAsjOk returns a tuple with the AnAsj field value
// and a boolean to check if the value has been set.
func (o *AlleleNumber) GetAnAsjOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AnAsj, true
}

// SetAnAsj sets field value
func (o *AlleleNumber) SetAnAsj(v int32) {
	o.AnAsj = v
}

// GetAnEas returns the AnEas field value
func (o *AlleleNumber) GetAnEas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AnEas
}

// GetAnEasOk returns a tuple with the AnEas field value
// and a boolean to check if the value has been set.
func (o *AlleleNumber) GetAnEasOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AnEas, true
}

// SetAnEas sets field value
func (o *AlleleNumber) SetAnEas(v int32) {
	o.AnEas = v
}

// GetAnFin returns the AnFin field value
func (o *AlleleNumber) GetAnFin() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AnFin
}

// GetAnFinOk returns a tuple with the AnFin field value
// and a boolean to check if the value has been set.
func (o *AlleleNumber) GetAnFinOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AnFin, true
}

// SetAnFin sets field value
func (o *AlleleNumber) SetAnFin(v int32) {
	o.AnFin = v
}

// GetAnNfe returns the AnNfe field value
func (o *AlleleNumber) GetAnNfe() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AnNfe
}

// GetAnNfeOk returns a tuple with the AnNfe field value
// and a boolean to check if the value has been set.
func (o *AlleleNumber) GetAnNfeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AnNfe, true
}

// SetAnNfe sets field value
func (o *AlleleNumber) SetAnNfe(v int32) {
	o.AnNfe = v
}

// GetAnOth returns the AnOth field value
func (o *AlleleNumber) GetAnOth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AnOth
}

// GetAnOthOk returns a tuple with the AnOth field value
// and a boolean to check if the value has been set.
func (o *AlleleNumber) GetAnOthOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AnOth, true
}

// SetAnOth sets field value
func (o *AlleleNumber) SetAnOth(v int32) {
	o.AnOth = v
}

// GetAnSas returns the AnSas field value
func (o *AlleleNumber) GetAnSas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AnSas
}

// GetAnSasOk returns a tuple with the AnSas field value
// and a boolean to check if the value has been set.
func (o *AlleleNumber) GetAnSasOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AnSas, true
}

// SetAnSas sets field value
func (o *AlleleNumber) SetAnSas(v int32) {
	o.AnSas = v
}

func (o AlleleNumber) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["an"] = o.An
	}
	if true {
		toSerialize["an_afr"] = o.AnAfr
	}
	if true {
		toSerialize["an_amr"] = o.AnAmr
	}
	if true {
		toSerialize["an_asj"] = o.AnAsj
	}
	if true {
		toSerialize["an_eas"] = o.AnEas
	}
	if true {
		toSerialize["an_fin"] = o.AnFin
	}
	if true {
		toSerialize["an_nfe"] = o.AnNfe
	}
	if true {
		toSerialize["an_oth"] = o.AnOth
	}
	if true {
		toSerialize["an_sas"] = o.AnSas
	}
	return json.Marshal(toSerialize)
}

type NullableAlleleNumber struct {
	value *AlleleNumber
	isSet bool
}

func (v NullableAlleleNumber) Get() *AlleleNumber {
	return v.value
}

func (v *NullableAlleleNumber) Set(val *AlleleNumber) {
	v.value = val
	v.isSet = true
}

func (v NullableAlleleNumber) IsSet() bool {
	return v.isSet
}

func (v *NullableAlleleNumber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlleleNumber(val *AlleleNumber) *NullableAlleleNumber {
	return &NullableAlleleNumber{value: val, isSet: true}
}

func (v NullableAlleleNumber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlleleNumber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


