/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// IndicatorQueryTreatment struct for IndicatorQueryTreatment
type IndicatorQueryTreatment struct {
	Abstracts []ArticleAbstract `json:"abstracts,omitempty"`
	Alterations []string `json:"alterations,omitempty"`
	ApprovedIndications []string `json:"approvedIndications,omitempty"`
	Description *string `json:"description,omitempty"`
	Drugs []Drug `json:"drugs,omitempty"`
	FdaApproved *bool `json:"fdaApproved,omitempty"`
	Level *string `json:"level,omitempty"`
	LevelAssociatedCancerType *TumorType `json:"levelAssociatedCancerType,omitempty"`
	Pmids []string `json:"pmids,omitempty"`
}

// NewIndicatorQueryTreatment instantiates a new IndicatorQueryTreatment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndicatorQueryTreatment() *IndicatorQueryTreatment {
	this := IndicatorQueryTreatment{}
	return &this
}

// NewIndicatorQueryTreatmentWithDefaults instantiates a new IndicatorQueryTreatment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndicatorQueryTreatmentWithDefaults() *IndicatorQueryTreatment {
	this := IndicatorQueryTreatment{}
	return &this
}

// GetAbstracts returns the Abstracts field value if set, zero value otherwise.
func (o *IndicatorQueryTreatment) GetAbstracts() []ArticleAbstract {
	if o == nil || isNil(o.Abstracts) {
		var ret []ArticleAbstract
		return ret
	}
	return o.Abstracts
}

// GetAbstractsOk returns a tuple with the Abstracts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryTreatment) GetAbstractsOk() ([]ArticleAbstract, bool) {
	if o == nil || isNil(o.Abstracts) {
    return nil, false
	}
	return o.Abstracts, true
}

// HasAbstracts returns a boolean if a field has been set.
func (o *IndicatorQueryTreatment) HasAbstracts() bool {
	if o != nil && !isNil(o.Abstracts) {
		return true
	}

	return false
}

// SetAbstracts gets a reference to the given []ArticleAbstract and assigns it to the Abstracts field.
func (o *IndicatorQueryTreatment) SetAbstracts(v []ArticleAbstract) {
	o.Abstracts = v
}

// GetAlterations returns the Alterations field value if set, zero value otherwise.
func (o *IndicatorQueryTreatment) GetAlterations() []string {
	if o == nil || isNil(o.Alterations) {
		var ret []string
		return ret
	}
	return o.Alterations
}

// GetAlterationsOk returns a tuple with the Alterations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryTreatment) GetAlterationsOk() ([]string, bool) {
	if o == nil || isNil(o.Alterations) {
    return nil, false
	}
	return o.Alterations, true
}

// HasAlterations returns a boolean if a field has been set.
func (o *IndicatorQueryTreatment) HasAlterations() bool {
	if o != nil && !isNil(o.Alterations) {
		return true
	}

	return false
}

// SetAlterations gets a reference to the given []string and assigns it to the Alterations field.
func (o *IndicatorQueryTreatment) SetAlterations(v []string) {
	o.Alterations = v
}

// GetApprovedIndications returns the ApprovedIndications field value if set, zero value otherwise.
func (o *IndicatorQueryTreatment) GetApprovedIndications() []string {
	if o == nil || isNil(o.ApprovedIndications) {
		var ret []string
		return ret
	}
	return o.ApprovedIndications
}

// GetApprovedIndicationsOk returns a tuple with the ApprovedIndications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryTreatment) GetApprovedIndicationsOk() ([]string, bool) {
	if o == nil || isNil(o.ApprovedIndications) {
    return nil, false
	}
	return o.ApprovedIndications, true
}

// HasApprovedIndications returns a boolean if a field has been set.
func (o *IndicatorQueryTreatment) HasApprovedIndications() bool {
	if o != nil && !isNil(o.ApprovedIndications) {
		return true
	}

	return false
}

// SetApprovedIndications gets a reference to the given []string and assigns it to the ApprovedIndications field.
func (o *IndicatorQueryTreatment) SetApprovedIndications(v []string) {
	o.ApprovedIndications = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IndicatorQueryTreatment) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryTreatment) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IndicatorQueryTreatment) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IndicatorQueryTreatment) SetDescription(v string) {
	o.Description = &v
}

// GetDrugs returns the Drugs field value if set, zero value otherwise.
func (o *IndicatorQueryTreatment) GetDrugs() []Drug {
	if o == nil || isNil(o.Drugs) {
		var ret []Drug
		return ret
	}
	return o.Drugs
}

// GetDrugsOk returns a tuple with the Drugs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryTreatment) GetDrugsOk() ([]Drug, bool) {
	if o == nil || isNil(o.Drugs) {
    return nil, false
	}
	return o.Drugs, true
}

// HasDrugs returns a boolean if a field has been set.
func (o *IndicatorQueryTreatment) HasDrugs() bool {
	if o != nil && !isNil(o.Drugs) {
		return true
	}

	return false
}

// SetDrugs gets a reference to the given []Drug and assigns it to the Drugs field.
func (o *IndicatorQueryTreatment) SetDrugs(v []Drug) {
	o.Drugs = v
}

// GetFdaApproved returns the FdaApproved field value if set, zero value otherwise.
func (o *IndicatorQueryTreatment) GetFdaApproved() bool {
	if o == nil || isNil(o.FdaApproved) {
		var ret bool
		return ret
	}
	return *o.FdaApproved
}

// GetFdaApprovedOk returns a tuple with the FdaApproved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryTreatment) GetFdaApprovedOk() (*bool, bool) {
	if o == nil || isNil(o.FdaApproved) {
    return nil, false
	}
	return o.FdaApproved, true
}

// HasFdaApproved returns a boolean if a field has been set.
func (o *IndicatorQueryTreatment) HasFdaApproved() bool {
	if o != nil && !isNil(o.FdaApproved) {
		return true
	}

	return false
}

// SetFdaApproved gets a reference to the given bool and assigns it to the FdaApproved field.
func (o *IndicatorQueryTreatment) SetFdaApproved(v bool) {
	o.FdaApproved = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *IndicatorQueryTreatment) GetLevel() string {
	if o == nil || isNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryTreatment) GetLevelOk() (*string, bool) {
	if o == nil || isNil(o.Level) {
    return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *IndicatorQueryTreatment) HasLevel() bool {
	if o != nil && !isNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *IndicatorQueryTreatment) SetLevel(v string) {
	o.Level = &v
}

// GetLevelAssociatedCancerType returns the LevelAssociatedCancerType field value if set, zero value otherwise.
func (o *IndicatorQueryTreatment) GetLevelAssociatedCancerType() TumorType {
	if o == nil || isNil(o.LevelAssociatedCancerType) {
		var ret TumorType
		return ret
	}
	return *o.LevelAssociatedCancerType
}

// GetLevelAssociatedCancerTypeOk returns a tuple with the LevelAssociatedCancerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryTreatment) GetLevelAssociatedCancerTypeOk() (*TumorType, bool) {
	if o == nil || isNil(o.LevelAssociatedCancerType) {
    return nil, false
	}
	return o.LevelAssociatedCancerType, true
}

// HasLevelAssociatedCancerType returns a boolean if a field has been set.
func (o *IndicatorQueryTreatment) HasLevelAssociatedCancerType() bool {
	if o != nil && !isNil(o.LevelAssociatedCancerType) {
		return true
	}

	return false
}

// SetLevelAssociatedCancerType gets a reference to the given TumorType and assigns it to the LevelAssociatedCancerType field.
func (o *IndicatorQueryTreatment) SetLevelAssociatedCancerType(v TumorType) {
	o.LevelAssociatedCancerType = &v
}

// GetPmids returns the Pmids field value if set, zero value otherwise.
func (o *IndicatorQueryTreatment) GetPmids() []string {
	if o == nil || isNil(o.Pmids) {
		var ret []string
		return ret
	}
	return o.Pmids
}

// GetPmidsOk returns a tuple with the Pmids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryTreatment) GetPmidsOk() ([]string, bool) {
	if o == nil || isNil(o.Pmids) {
    return nil, false
	}
	return o.Pmids, true
}

// HasPmids returns a boolean if a field has been set.
func (o *IndicatorQueryTreatment) HasPmids() bool {
	if o != nil && !isNil(o.Pmids) {
		return true
	}

	return false
}

// SetPmids gets a reference to the given []string and assigns it to the Pmids field.
func (o *IndicatorQueryTreatment) SetPmids(v []string) {
	o.Pmids = v
}

func (o IndicatorQueryTreatment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Abstracts) {
		toSerialize["abstracts"] = o.Abstracts
	}
	if !isNil(o.Alterations) {
		toSerialize["alterations"] = o.Alterations
	}
	if !isNil(o.ApprovedIndications) {
		toSerialize["approvedIndications"] = o.ApprovedIndications
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Drugs) {
		toSerialize["drugs"] = o.Drugs
	}
	if !isNil(o.FdaApproved) {
		toSerialize["fdaApproved"] = o.FdaApproved
	}
	if !isNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !isNil(o.LevelAssociatedCancerType) {
		toSerialize["levelAssociatedCancerType"] = o.LevelAssociatedCancerType
	}
	if !isNil(o.Pmids) {
		toSerialize["pmids"] = o.Pmids
	}
	return json.Marshal(toSerialize)
}

type NullableIndicatorQueryTreatment struct {
	value *IndicatorQueryTreatment
	isSet bool
}

func (v NullableIndicatorQueryTreatment) Get() *IndicatorQueryTreatment {
	return v.value
}

func (v *NullableIndicatorQueryTreatment) Set(val *IndicatorQueryTreatment) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicatorQueryTreatment) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicatorQueryTreatment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicatorQueryTreatment(val *IndicatorQueryTreatment) *NullableIndicatorQueryTreatment {
	return &NullableIndicatorQueryTreatment{value: val, isSet: true}
}

func (v NullableIndicatorQueryTreatment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicatorQueryTreatment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


