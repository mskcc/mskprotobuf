/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// Vues struct for Vues
type Vues struct {
	Comment *string `json:"comment,omitempty"`
	DefaultEffect *string `json:"defaultEffect,omitempty"`
	GenomicLocation *string `json:"genomicLocation,omitempty"`
	GenomicLocationDescription *string `json:"genomicLocationDescription,omitempty"`
	HugoGeneSymbol *string `json:"hugoGeneSymbol,omitempty"`
	PubmedIds []int32 `json:"pubmedIds,omitempty"`
	ReferenceText *string `json:"referenceText,omitempty"`
	RevisedProteinEffect *string `json:"revisedProteinEffect,omitempty"`
	TranscriptId *string `json:"transcriptId,omitempty"`
	Variant *string `json:"variant,omitempty"`
	VariantClassification *string `json:"variantClassification,omitempty"`
}

// NewVues instantiates a new Vues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVues() *Vues {
	this := Vues{}
	return &this
}

// NewVuesWithDefaults instantiates a new Vues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVuesWithDefaults() *Vues {
	this := Vues{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Vues) GetComment() string {
	if o == nil || isNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vues) GetCommentOk() (*string, bool) {
	if o == nil || isNil(o.Comment) {
    return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Vues) HasComment() bool {
	if o != nil && !isNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Vues) SetComment(v string) {
	o.Comment = &v
}

// GetDefaultEffect returns the DefaultEffect field value if set, zero value otherwise.
func (o *Vues) GetDefaultEffect() string {
	if o == nil || isNil(o.DefaultEffect) {
		var ret string
		return ret
	}
	return *o.DefaultEffect
}

// GetDefaultEffectOk returns a tuple with the DefaultEffect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vues) GetDefaultEffectOk() (*string, bool) {
	if o == nil || isNil(o.DefaultEffect) {
    return nil, false
	}
	return o.DefaultEffect, true
}

// HasDefaultEffect returns a boolean if a field has been set.
func (o *Vues) HasDefaultEffect() bool {
	if o != nil && !isNil(o.DefaultEffect) {
		return true
	}

	return false
}

// SetDefaultEffect gets a reference to the given string and assigns it to the DefaultEffect field.
func (o *Vues) SetDefaultEffect(v string) {
	o.DefaultEffect = &v
}

// GetGenomicLocation returns the GenomicLocation field value if set, zero value otherwise.
func (o *Vues) GetGenomicLocation() string {
	if o == nil || isNil(o.GenomicLocation) {
		var ret string
		return ret
	}
	return *o.GenomicLocation
}

// GetGenomicLocationOk returns a tuple with the GenomicLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vues) GetGenomicLocationOk() (*string, bool) {
	if o == nil || isNil(o.GenomicLocation) {
    return nil, false
	}
	return o.GenomicLocation, true
}

// HasGenomicLocation returns a boolean if a field has been set.
func (o *Vues) HasGenomicLocation() bool {
	if o != nil && !isNil(o.GenomicLocation) {
		return true
	}

	return false
}

// SetGenomicLocation gets a reference to the given string and assigns it to the GenomicLocation field.
func (o *Vues) SetGenomicLocation(v string) {
	o.GenomicLocation = &v
}

// GetGenomicLocationDescription returns the GenomicLocationDescription field value if set, zero value otherwise.
func (o *Vues) GetGenomicLocationDescription() string {
	if o == nil || isNil(o.GenomicLocationDescription) {
		var ret string
		return ret
	}
	return *o.GenomicLocationDescription
}

// GetGenomicLocationDescriptionOk returns a tuple with the GenomicLocationDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vues) GetGenomicLocationDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.GenomicLocationDescription) {
    return nil, false
	}
	return o.GenomicLocationDescription, true
}

// HasGenomicLocationDescription returns a boolean if a field has been set.
func (o *Vues) HasGenomicLocationDescription() bool {
	if o != nil && !isNil(o.GenomicLocationDescription) {
		return true
	}

	return false
}

// SetGenomicLocationDescription gets a reference to the given string and assigns it to the GenomicLocationDescription field.
func (o *Vues) SetGenomicLocationDescription(v string) {
	o.GenomicLocationDescription = &v
}

// GetHugoGeneSymbol returns the HugoGeneSymbol field value if set, zero value otherwise.
func (o *Vues) GetHugoGeneSymbol() string {
	if o == nil || isNil(o.HugoGeneSymbol) {
		var ret string
		return ret
	}
	return *o.HugoGeneSymbol
}

// GetHugoGeneSymbolOk returns a tuple with the HugoGeneSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vues) GetHugoGeneSymbolOk() (*string, bool) {
	if o == nil || isNil(o.HugoGeneSymbol) {
    return nil, false
	}
	return o.HugoGeneSymbol, true
}

// HasHugoGeneSymbol returns a boolean if a field has been set.
func (o *Vues) HasHugoGeneSymbol() bool {
	if o != nil && !isNil(o.HugoGeneSymbol) {
		return true
	}

	return false
}

// SetHugoGeneSymbol gets a reference to the given string and assigns it to the HugoGeneSymbol field.
func (o *Vues) SetHugoGeneSymbol(v string) {
	o.HugoGeneSymbol = &v
}

// GetPubmedIds returns the PubmedIds field value if set, zero value otherwise.
func (o *Vues) GetPubmedIds() []int32 {
	if o == nil || isNil(o.PubmedIds) {
		var ret []int32
		return ret
	}
	return o.PubmedIds
}

// GetPubmedIdsOk returns a tuple with the PubmedIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vues) GetPubmedIdsOk() ([]int32, bool) {
	if o == nil || isNil(o.PubmedIds) {
    return nil, false
	}
	return o.PubmedIds, true
}

// HasPubmedIds returns a boolean if a field has been set.
func (o *Vues) HasPubmedIds() bool {
	if o != nil && !isNil(o.PubmedIds) {
		return true
	}

	return false
}

// SetPubmedIds gets a reference to the given []int32 and assigns it to the PubmedIds field.
func (o *Vues) SetPubmedIds(v []int32) {
	o.PubmedIds = v
}

// GetReferenceText returns the ReferenceText field value if set, zero value otherwise.
func (o *Vues) GetReferenceText() string {
	if o == nil || isNil(o.ReferenceText) {
		var ret string
		return ret
	}
	return *o.ReferenceText
}

// GetReferenceTextOk returns a tuple with the ReferenceText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vues) GetReferenceTextOk() (*string, bool) {
	if o == nil || isNil(o.ReferenceText) {
    return nil, false
	}
	return o.ReferenceText, true
}

// HasReferenceText returns a boolean if a field has been set.
func (o *Vues) HasReferenceText() bool {
	if o != nil && !isNil(o.ReferenceText) {
		return true
	}

	return false
}

// SetReferenceText gets a reference to the given string and assigns it to the ReferenceText field.
func (o *Vues) SetReferenceText(v string) {
	o.ReferenceText = &v
}

// GetRevisedProteinEffect returns the RevisedProteinEffect field value if set, zero value otherwise.
func (o *Vues) GetRevisedProteinEffect() string {
	if o == nil || isNil(o.RevisedProteinEffect) {
		var ret string
		return ret
	}
	return *o.RevisedProteinEffect
}

// GetRevisedProteinEffectOk returns a tuple with the RevisedProteinEffect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vues) GetRevisedProteinEffectOk() (*string, bool) {
	if o == nil || isNil(o.RevisedProteinEffect) {
    return nil, false
	}
	return o.RevisedProteinEffect, true
}

// HasRevisedProteinEffect returns a boolean if a field has been set.
func (o *Vues) HasRevisedProteinEffect() bool {
	if o != nil && !isNil(o.RevisedProteinEffect) {
		return true
	}

	return false
}

// SetRevisedProteinEffect gets a reference to the given string and assigns it to the RevisedProteinEffect field.
func (o *Vues) SetRevisedProteinEffect(v string) {
	o.RevisedProteinEffect = &v
}

// GetTranscriptId returns the TranscriptId field value if set, zero value otherwise.
func (o *Vues) GetTranscriptId() string {
	if o == nil || isNil(o.TranscriptId) {
		var ret string
		return ret
	}
	return *o.TranscriptId
}

// GetTranscriptIdOk returns a tuple with the TranscriptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vues) GetTranscriptIdOk() (*string, bool) {
	if o == nil || isNil(o.TranscriptId) {
    return nil, false
	}
	return o.TranscriptId, true
}

// HasTranscriptId returns a boolean if a field has been set.
func (o *Vues) HasTranscriptId() bool {
	if o != nil && !isNil(o.TranscriptId) {
		return true
	}

	return false
}

// SetTranscriptId gets a reference to the given string and assigns it to the TranscriptId field.
func (o *Vues) SetTranscriptId(v string) {
	o.TranscriptId = &v
}

// GetVariant returns the Variant field value if set, zero value otherwise.
func (o *Vues) GetVariant() string {
	if o == nil || isNil(o.Variant) {
		var ret string
		return ret
	}
	return *o.Variant
}

// GetVariantOk returns a tuple with the Variant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vues) GetVariantOk() (*string, bool) {
	if o == nil || isNil(o.Variant) {
    return nil, false
	}
	return o.Variant, true
}

// HasVariant returns a boolean if a field has been set.
func (o *Vues) HasVariant() bool {
	if o != nil && !isNil(o.Variant) {
		return true
	}

	return false
}

// SetVariant gets a reference to the given string and assigns it to the Variant field.
func (o *Vues) SetVariant(v string) {
	o.Variant = &v
}

// GetVariantClassification returns the VariantClassification field value if set, zero value otherwise.
func (o *Vues) GetVariantClassification() string {
	if o == nil || isNil(o.VariantClassification) {
		var ret string
		return ret
	}
	return *o.VariantClassification
}

// GetVariantClassificationOk returns a tuple with the VariantClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vues) GetVariantClassificationOk() (*string, bool) {
	if o == nil || isNil(o.VariantClassification) {
    return nil, false
	}
	return o.VariantClassification, true
}

// HasVariantClassification returns a boolean if a field has been set.
func (o *Vues) HasVariantClassification() bool {
	if o != nil && !isNil(o.VariantClassification) {
		return true
	}

	return false
}

// SetVariantClassification gets a reference to the given string and assigns it to the VariantClassification field.
func (o *Vues) SetVariantClassification(v string) {
	o.VariantClassification = &v
}

func (o Vues) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !isNil(o.DefaultEffect) {
		toSerialize["defaultEffect"] = o.DefaultEffect
	}
	if !isNil(o.GenomicLocation) {
		toSerialize["genomicLocation"] = o.GenomicLocation
	}
	if !isNil(o.GenomicLocationDescription) {
		toSerialize["genomicLocationDescription"] = o.GenomicLocationDescription
	}
	if !isNil(o.HugoGeneSymbol) {
		toSerialize["hugoGeneSymbol"] = o.HugoGeneSymbol
	}
	if !isNil(o.PubmedIds) {
		toSerialize["pubmedIds"] = o.PubmedIds
	}
	if !isNil(o.ReferenceText) {
		toSerialize["referenceText"] = o.ReferenceText
	}
	if !isNil(o.RevisedProteinEffect) {
		toSerialize["revisedProteinEffect"] = o.RevisedProteinEffect
	}
	if !isNil(o.TranscriptId) {
		toSerialize["transcriptId"] = o.TranscriptId
	}
	if !isNil(o.Variant) {
		toSerialize["variant"] = o.Variant
	}
	if !isNil(o.VariantClassification) {
		toSerialize["variantClassification"] = o.VariantClassification
	}
	return json.Marshal(toSerialize)
}

type NullableVues struct {
	value *Vues
	isSet bool
}

func (v NullableVues) Get() *Vues {
	return v.value
}

func (v *NullableVues) Set(val *Vues) {
	v.value = val
	v.isSet = true
}

func (v NullableVues) IsSet() bool {
	return v.isSet
}

func (v *NullableVues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVues(val *Vues) *NullableVues {
	return &NullableVues{value: val, isSet: true}
}

func (v NullableVues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


