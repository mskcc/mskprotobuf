/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// Rcv struct for Rcv
type Rcv struct {
	// accession
	Accession *string `json:"accession,omitempty"`
	// clinical_significance
	ClinicalSignificance *string `json:"clinicalSignificance,omitempty"`
	// origin
	Origin *string `json:"origin,omitempty"`
	// preferred_name
	PreferredName *string `json:"preferredName,omitempty"`
}

// NewRcv instantiates a new Rcv object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRcv() *Rcv {
	this := Rcv{}
	return &this
}

// NewRcvWithDefaults instantiates a new Rcv object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRcvWithDefaults() *Rcv {
	this := Rcv{}
	return &this
}

// GetAccession returns the Accession field value if set, zero value otherwise.
func (o *Rcv) GetAccession() string {
	if o == nil || isNil(o.Accession) {
		var ret string
		return ret
	}
	return *o.Accession
}

// GetAccessionOk returns a tuple with the Accession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rcv) GetAccessionOk() (*string, bool) {
	if o == nil || isNil(o.Accession) {
    return nil, false
	}
	return o.Accession, true
}

// HasAccession returns a boolean if a field has been set.
func (o *Rcv) HasAccession() bool {
	if o != nil && !isNil(o.Accession) {
		return true
	}

	return false
}

// SetAccession gets a reference to the given string and assigns it to the Accession field.
func (o *Rcv) SetAccession(v string) {
	o.Accession = &v
}

// GetClinicalSignificance returns the ClinicalSignificance field value if set, zero value otherwise.
func (o *Rcv) GetClinicalSignificance() string {
	if o == nil || isNil(o.ClinicalSignificance) {
		var ret string
		return ret
	}
	return *o.ClinicalSignificance
}

// GetClinicalSignificanceOk returns a tuple with the ClinicalSignificance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rcv) GetClinicalSignificanceOk() (*string, bool) {
	if o == nil || isNil(o.ClinicalSignificance) {
    return nil, false
	}
	return o.ClinicalSignificance, true
}

// HasClinicalSignificance returns a boolean if a field has been set.
func (o *Rcv) HasClinicalSignificance() bool {
	if o != nil && !isNil(o.ClinicalSignificance) {
		return true
	}

	return false
}

// SetClinicalSignificance gets a reference to the given string and assigns it to the ClinicalSignificance field.
func (o *Rcv) SetClinicalSignificance(v string) {
	o.ClinicalSignificance = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *Rcv) GetOrigin() string {
	if o == nil || isNil(o.Origin) {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rcv) GetOriginOk() (*string, bool) {
	if o == nil || isNil(o.Origin) {
    return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *Rcv) HasOrigin() bool {
	if o != nil && !isNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *Rcv) SetOrigin(v string) {
	o.Origin = &v
}

// GetPreferredName returns the PreferredName field value if set, zero value otherwise.
func (o *Rcv) GetPreferredName() string {
	if o == nil || isNil(o.PreferredName) {
		var ret string
		return ret
	}
	return *o.PreferredName
}

// GetPreferredNameOk returns a tuple with the PreferredName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rcv) GetPreferredNameOk() (*string, bool) {
	if o == nil || isNil(o.PreferredName) {
    return nil, false
	}
	return o.PreferredName, true
}

// HasPreferredName returns a boolean if a field has been set.
func (o *Rcv) HasPreferredName() bool {
	if o != nil && !isNil(o.PreferredName) {
		return true
	}

	return false
}

// SetPreferredName gets a reference to the given string and assigns it to the PreferredName field.
func (o *Rcv) SetPreferredName(v string) {
	o.PreferredName = &v
}

func (o Rcv) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Accession) {
		toSerialize["accession"] = o.Accession
	}
	if !isNil(o.ClinicalSignificance) {
		toSerialize["clinicalSignificance"] = o.ClinicalSignificance
	}
	if !isNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !isNil(o.PreferredName) {
		toSerialize["preferredName"] = o.PreferredName
	}
	return json.Marshal(toSerialize)
}

type NullableRcv struct {
	value *Rcv
	isSet bool
}

func (v NullableRcv) Get() *Rcv {
	return v.value
}

func (v *NullableRcv) Set(val *Rcv) {
	v.value = val
	v.isSet = true
}

func (v NullableRcv) IsSet() bool {
	return v.isSet
}

func (v *NullableRcv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRcv(val *Rcv) *NullableRcv {
	return &NullableRcv{value: val, isSet: true}
}

func (v NullableRcv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRcv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


