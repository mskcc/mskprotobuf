/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// Homozygotes struct for Homozygotes
type Homozygotes struct {
	Hom int32 `json:"hom"`
	HomAfr int32 `json:"hom_afr"`
	HomAmr int32 `json:"hom_amr"`
	HomAsj int32 `json:"hom_asj"`
	HomEas int32 `json:"hom_eas"`
	HomFin int32 `json:"hom_fin"`
	HomNfe int32 `json:"hom_nfe"`
	HomOth int32 `json:"hom_oth"`
	HomSas int32 `json:"hom_sas"`
}

// NewHomozygotes instantiates a new Homozygotes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHomozygotes(hom int32, homAfr int32, homAmr int32, homAsj int32, homEas int32, homFin int32, homNfe int32, homOth int32, homSas int32) *Homozygotes {
	this := Homozygotes{}
	this.Hom = hom
	this.HomAfr = homAfr
	this.HomAmr = homAmr
	this.HomAsj = homAsj
	this.HomEas = homEas
	this.HomFin = homFin
	this.HomNfe = homNfe
	this.HomOth = homOth
	this.HomSas = homSas
	return &this
}

// NewHomozygotesWithDefaults instantiates a new Homozygotes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHomozygotesWithDefaults() *Homozygotes {
	this := Homozygotes{}
	return &this
}

// GetHom returns the Hom field value
func (o *Homozygotes) GetHom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Hom
}

// GetHomOk returns a tuple with the Hom field value
// and a boolean to check if the value has been set.
func (o *Homozygotes) GetHomOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Hom, true
}

// SetHom sets field value
func (o *Homozygotes) SetHom(v int32) {
	o.Hom = v
}

// GetHomAfr returns the HomAfr field value
func (o *Homozygotes) GetHomAfr() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HomAfr
}

// GetHomAfrOk returns a tuple with the HomAfr field value
// and a boolean to check if the value has been set.
func (o *Homozygotes) GetHomAfrOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HomAfr, true
}

// SetHomAfr sets field value
func (o *Homozygotes) SetHomAfr(v int32) {
	o.HomAfr = v
}

// GetHomAmr returns the HomAmr field value
func (o *Homozygotes) GetHomAmr() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HomAmr
}

// GetHomAmrOk returns a tuple with the HomAmr field value
// and a boolean to check if the value has been set.
func (o *Homozygotes) GetHomAmrOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HomAmr, true
}

// SetHomAmr sets field value
func (o *Homozygotes) SetHomAmr(v int32) {
	o.HomAmr = v
}

// GetHomAsj returns the HomAsj field value
func (o *Homozygotes) GetHomAsj() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HomAsj
}

// GetHomAsjOk returns a tuple with the HomAsj field value
// and a boolean to check if the value has been set.
func (o *Homozygotes) GetHomAsjOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HomAsj, true
}

// SetHomAsj sets field value
func (o *Homozygotes) SetHomAsj(v int32) {
	o.HomAsj = v
}

// GetHomEas returns the HomEas field value
func (o *Homozygotes) GetHomEas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HomEas
}

// GetHomEasOk returns a tuple with the HomEas field value
// and a boolean to check if the value has been set.
func (o *Homozygotes) GetHomEasOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HomEas, true
}

// SetHomEas sets field value
func (o *Homozygotes) SetHomEas(v int32) {
	o.HomEas = v
}

// GetHomFin returns the HomFin field value
func (o *Homozygotes) GetHomFin() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HomFin
}

// GetHomFinOk returns a tuple with the HomFin field value
// and a boolean to check if the value has been set.
func (o *Homozygotes) GetHomFinOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HomFin, true
}

// SetHomFin sets field value
func (o *Homozygotes) SetHomFin(v int32) {
	o.HomFin = v
}

// GetHomNfe returns the HomNfe field value
func (o *Homozygotes) GetHomNfe() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HomNfe
}

// GetHomNfeOk returns a tuple with the HomNfe field value
// and a boolean to check if the value has been set.
func (o *Homozygotes) GetHomNfeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HomNfe, true
}

// SetHomNfe sets field value
func (o *Homozygotes) SetHomNfe(v int32) {
	o.HomNfe = v
}

// GetHomOth returns the HomOth field value
func (o *Homozygotes) GetHomOth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HomOth
}

// GetHomOthOk returns a tuple with the HomOth field value
// and a boolean to check if the value has been set.
func (o *Homozygotes) GetHomOthOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HomOth, true
}

// SetHomOth sets field value
func (o *Homozygotes) SetHomOth(v int32) {
	o.HomOth = v
}

// GetHomSas returns the HomSas field value
func (o *Homozygotes) GetHomSas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HomSas
}

// GetHomSasOk returns a tuple with the HomSas field value
// and a boolean to check if the value has been set.
func (o *Homozygotes) GetHomSasOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HomSas, true
}

// SetHomSas sets field value
func (o *Homozygotes) SetHomSas(v int32) {
	o.HomSas = v
}

func (o Homozygotes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hom"] = o.Hom
	}
	if true {
		toSerialize["hom_afr"] = o.HomAfr
	}
	if true {
		toSerialize["hom_amr"] = o.HomAmr
	}
	if true {
		toSerialize["hom_asj"] = o.HomAsj
	}
	if true {
		toSerialize["hom_eas"] = o.HomEas
	}
	if true {
		toSerialize["hom_fin"] = o.HomFin
	}
	if true {
		toSerialize["hom_nfe"] = o.HomNfe
	}
	if true {
		toSerialize["hom_oth"] = o.HomOth
	}
	if true {
		toSerialize["hom_sas"] = o.HomSas
	}
	return json.Marshal(toSerialize)
}

type NullableHomozygotes struct {
	value *Homozygotes
	isSet bool
}

func (v NullableHomozygotes) Get() *Homozygotes {
	return v.value
}

func (v *NullableHomozygotes) Set(val *Homozygotes) {
	v.value = val
	v.isSet = true
}

func (v NullableHomozygotes) IsSet() bool {
	return v.isSet
}

func (v *NullableHomozygotes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHomozygotes(val *Homozygotes) *NullableHomozygotes {
	return &NullableHomozygotes{value: val, isSet: true}
}

func (v NullableHomozygotes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHomozygotes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


