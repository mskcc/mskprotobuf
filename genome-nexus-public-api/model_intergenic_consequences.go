/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// IntergenicConsequences struct for IntergenicConsequences
type IntergenicConsequences struct {
	// impact
	Impact string `json:"impact"`
	// variant_allele
	VariantAllele string `json:"variantAllele"`
	// consequence_terms
	ConsequenceTerms []string `json:"consequenceTerms"`
}

// NewIntergenicConsequences instantiates a new IntergenicConsequences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntergenicConsequences(impact string, variantAllele string, consequenceTerms []string) *IntergenicConsequences {
	this := IntergenicConsequences{}
	this.Impact = impact
	this.VariantAllele = variantAllele
	this.ConsequenceTerms = consequenceTerms
	return &this
}

// NewIntergenicConsequencesWithDefaults instantiates a new IntergenicConsequences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntergenicConsequencesWithDefaults() *IntergenicConsequences {
	this := IntergenicConsequences{}
	return &this
}

// GetImpact returns the Impact field value
func (o *IntergenicConsequences) GetImpact() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Impact
}

// GetImpactOk returns a tuple with the Impact field value
// and a boolean to check if the value has been set.
func (o *IntergenicConsequences) GetImpactOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Impact, true
}

// SetImpact sets field value
func (o *IntergenicConsequences) SetImpact(v string) {
	o.Impact = v
}

// GetVariantAllele returns the VariantAllele field value
func (o *IntergenicConsequences) GetVariantAllele() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VariantAllele
}

// GetVariantAlleleOk returns a tuple with the VariantAllele field value
// and a boolean to check if the value has been set.
func (o *IntergenicConsequences) GetVariantAlleleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.VariantAllele, true
}

// SetVariantAllele sets field value
func (o *IntergenicConsequences) SetVariantAllele(v string) {
	o.VariantAllele = v
}

// GetConsequenceTerms returns the ConsequenceTerms field value
func (o *IntergenicConsequences) GetConsequenceTerms() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ConsequenceTerms
}

// GetConsequenceTermsOk returns a tuple with the ConsequenceTerms field value
// and a boolean to check if the value has been set.
func (o *IntergenicConsequences) GetConsequenceTermsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ConsequenceTerms, true
}

// SetConsequenceTerms sets field value
func (o *IntergenicConsequences) SetConsequenceTerms(v []string) {
	o.ConsequenceTerms = v
}

func (o IntergenicConsequences) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["impact"] = o.Impact
	}
	if true {
		toSerialize["variantAllele"] = o.VariantAllele
	}
	if true {
		toSerialize["consequenceTerms"] = o.ConsequenceTerms
	}
	return json.Marshal(toSerialize)
}

type NullableIntergenicConsequences struct {
	value *IntergenicConsequences
	isSet bool
}

func (v NullableIntergenicConsequences) Get() *IntergenicConsequences {
	return v.value
}

func (v *NullableIntergenicConsequences) Set(val *IntergenicConsequences) {
	v.value = val
	v.isSet = true
}

func (v NullableIntergenicConsequences) IsSet() bool {
	return v.isSet
}

func (v *NullableIntergenicConsequences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntergenicConsequences(val *IntergenicConsequences) *NullableIntergenicConsequences {
	return &NullableIntergenicConsequences{value: val, isSet: true}
}

func (v NullableIntergenicConsequences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntergenicConsequences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


