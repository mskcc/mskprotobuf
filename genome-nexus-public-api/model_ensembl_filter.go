/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_public_api

import (
	"encoding/json"
)

// EnsemblFilter struct for EnsemblFilter
type EnsemblFilter struct {
	// List of Ensembl gene IDs. For example [\"ENSG00000136999\", \"ENSG00000272398\", \"ENSG00000198695\"]
	GeneIds []string `json:"geneIds,omitempty"`
	// List of Hugo Symbols. For example [\"TP53\", \"PIK3CA\", \"BRCA1\"]
	HugoSymbols []string `json:"hugoSymbols,omitempty"`
	// List of Ensembl protein IDs. For example [\"ENSP00000439985\", \"ENSP00000478460\", \"ENSP00000346196\"]
	ProteinIds []string `json:"proteinIds,omitempty"`
	// List of Ensembl transcript IDs. For example [\"ENST00000361390\", \"ENST00000361453\", \"ENST00000361624\"]
	TranscriptIds []string `json:"transcriptIds,omitempty"`
}

// NewEnsemblFilter instantiates a new EnsemblFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnsemblFilter() *EnsemblFilter {
	this := EnsemblFilter{}
	return &this
}

// NewEnsemblFilterWithDefaults instantiates a new EnsemblFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnsemblFilterWithDefaults() *EnsemblFilter {
	this := EnsemblFilter{}
	return &this
}

// GetGeneIds returns the GeneIds field value if set, zero value otherwise.
func (o *EnsemblFilter) GetGeneIds() []string {
	if o == nil || isNil(o.GeneIds) {
		var ret []string
		return ret
	}
	return o.GeneIds
}

// GetGeneIdsOk returns a tuple with the GeneIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblFilter) GetGeneIdsOk() ([]string, bool) {
	if o == nil || isNil(o.GeneIds) {
    return nil, false
	}
	return o.GeneIds, true
}

// HasGeneIds returns a boolean if a field has been set.
func (o *EnsemblFilter) HasGeneIds() bool {
	if o != nil && !isNil(o.GeneIds) {
		return true
	}

	return false
}

// SetGeneIds gets a reference to the given []string and assigns it to the GeneIds field.
func (o *EnsemblFilter) SetGeneIds(v []string) {
	o.GeneIds = v
}

// GetHugoSymbols returns the HugoSymbols field value if set, zero value otherwise.
func (o *EnsemblFilter) GetHugoSymbols() []string {
	if o == nil || isNil(o.HugoSymbols) {
		var ret []string
		return ret
	}
	return o.HugoSymbols
}

// GetHugoSymbolsOk returns a tuple with the HugoSymbols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblFilter) GetHugoSymbolsOk() ([]string, bool) {
	if o == nil || isNil(o.HugoSymbols) {
    return nil, false
	}
	return o.HugoSymbols, true
}

// HasHugoSymbols returns a boolean if a field has been set.
func (o *EnsemblFilter) HasHugoSymbols() bool {
	if o != nil && !isNil(o.HugoSymbols) {
		return true
	}

	return false
}

// SetHugoSymbols gets a reference to the given []string and assigns it to the HugoSymbols field.
func (o *EnsemblFilter) SetHugoSymbols(v []string) {
	o.HugoSymbols = v
}

// GetProteinIds returns the ProteinIds field value if set, zero value otherwise.
func (o *EnsemblFilter) GetProteinIds() []string {
	if o == nil || isNil(o.ProteinIds) {
		var ret []string
		return ret
	}
	return o.ProteinIds
}

// GetProteinIdsOk returns a tuple with the ProteinIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblFilter) GetProteinIdsOk() ([]string, bool) {
	if o == nil || isNil(o.ProteinIds) {
    return nil, false
	}
	return o.ProteinIds, true
}

// HasProteinIds returns a boolean if a field has been set.
func (o *EnsemblFilter) HasProteinIds() bool {
	if o != nil && !isNil(o.ProteinIds) {
		return true
	}

	return false
}

// SetProteinIds gets a reference to the given []string and assigns it to the ProteinIds field.
func (o *EnsemblFilter) SetProteinIds(v []string) {
	o.ProteinIds = v
}

// GetTranscriptIds returns the TranscriptIds field value if set, zero value otherwise.
func (o *EnsemblFilter) GetTranscriptIds() []string {
	if o == nil || isNil(o.TranscriptIds) {
		var ret []string
		return ret
	}
	return o.TranscriptIds
}

// GetTranscriptIdsOk returns a tuple with the TranscriptIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblFilter) GetTranscriptIdsOk() ([]string, bool) {
	if o == nil || isNil(o.TranscriptIds) {
    return nil, false
	}
	return o.TranscriptIds, true
}

// HasTranscriptIds returns a boolean if a field has been set.
func (o *EnsemblFilter) HasTranscriptIds() bool {
	if o != nil && !isNil(o.TranscriptIds) {
		return true
	}

	return false
}

// SetTranscriptIds gets a reference to the given []string and assigns it to the TranscriptIds field.
func (o *EnsemblFilter) SetTranscriptIds(v []string) {
	o.TranscriptIds = v
}

func (o EnsemblFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.GeneIds) {
		toSerialize["geneIds"] = o.GeneIds
	}
	if !isNil(o.HugoSymbols) {
		toSerialize["hugoSymbols"] = o.HugoSymbols
	}
	if !isNil(o.ProteinIds) {
		toSerialize["proteinIds"] = o.ProteinIds
	}
	if !isNil(o.TranscriptIds) {
		toSerialize["transcriptIds"] = o.TranscriptIds
	}
	return json.Marshal(toSerialize)
}

type NullableEnsemblFilter struct {
	value *EnsemblFilter
	isSet bool
}

func (v NullableEnsemblFilter) Get() *EnsemblFilter {
	return v.value
}

func (v *NullableEnsemblFilter) Set(val *EnsemblFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableEnsemblFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableEnsemblFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnsemblFilter(val *EnsemblFilter) *NullableEnsemblFilter {
	return &NullableEnsemblFilter{value: val, isSet: true}
}

func (v NullableEnsemblFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnsemblFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


