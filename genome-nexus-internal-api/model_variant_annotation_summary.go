/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"encoding/json"
)

// VariantAnnotationSummary struct for VariantAnnotationSummary
type VariantAnnotationSummary struct {
	// Assembly name
	AssemblyName *string `json:"assemblyName,omitempty"`
	// Canonical transcript id
	CanonicalTranscriptId *string `json:"canonicalTranscriptId,omitempty"`
	GenomicLocation *GenomicLocation `json:"genomicLocation,omitempty"`
	// Strand (- or +)
	StrandSign *string `json:"strandSign,omitempty"`
	// All transcript consequence summaries
	TranscriptConsequenceSummaries []TranscriptConsequenceSummary `json:"transcriptConsequenceSummaries"`
	TranscriptConsequenceSummary TranscriptConsequenceSummary `json:"transcriptConsequenceSummary"`
	// (Deprecated) Transcript consequence summaries (list of one when using annotation/, multiple when using annotation/summary/
	TranscriptConsequences []TranscriptConsequenceSummary `json:"transcriptConsequences"`
	// Variant key
	Variant string `json:"variant"`
	// Variant type
	VariantType *string `json:"variantType,omitempty"`
	Vues *Vues `json:"vues,omitempty"`
}

// NewVariantAnnotationSummary instantiates a new VariantAnnotationSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariantAnnotationSummary(transcriptConsequenceSummaries []TranscriptConsequenceSummary, transcriptConsequenceSummary TranscriptConsequenceSummary, transcriptConsequences []TranscriptConsequenceSummary, variant string) *VariantAnnotationSummary {
	this := VariantAnnotationSummary{}
	this.TranscriptConsequenceSummaries = transcriptConsequenceSummaries
	this.TranscriptConsequenceSummary = transcriptConsequenceSummary
	this.TranscriptConsequences = transcriptConsequences
	this.Variant = variant
	return &this
}

// NewVariantAnnotationSummaryWithDefaults instantiates a new VariantAnnotationSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariantAnnotationSummaryWithDefaults() *VariantAnnotationSummary {
	this := VariantAnnotationSummary{}
	return &this
}

// GetAssemblyName returns the AssemblyName field value if set, zero value otherwise.
func (o *VariantAnnotationSummary) GetAssemblyName() string {
	if o == nil || isNil(o.AssemblyName) {
		var ret string
		return ret
	}
	return *o.AssemblyName
}

// GetAssemblyNameOk returns a tuple with the AssemblyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotationSummary) GetAssemblyNameOk() (*string, bool) {
	if o == nil || isNil(o.AssemblyName) {
    return nil, false
	}
	return o.AssemblyName, true
}

// HasAssemblyName returns a boolean if a field has been set.
func (o *VariantAnnotationSummary) HasAssemblyName() bool {
	if o != nil && !isNil(o.AssemblyName) {
		return true
	}

	return false
}

// SetAssemblyName gets a reference to the given string and assigns it to the AssemblyName field.
func (o *VariantAnnotationSummary) SetAssemblyName(v string) {
	o.AssemblyName = &v
}

// GetCanonicalTranscriptId returns the CanonicalTranscriptId field value if set, zero value otherwise.
func (o *VariantAnnotationSummary) GetCanonicalTranscriptId() string {
	if o == nil || isNil(o.CanonicalTranscriptId) {
		var ret string
		return ret
	}
	return *o.CanonicalTranscriptId
}

// GetCanonicalTranscriptIdOk returns a tuple with the CanonicalTranscriptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotationSummary) GetCanonicalTranscriptIdOk() (*string, bool) {
	if o == nil || isNil(o.CanonicalTranscriptId) {
    return nil, false
	}
	return o.CanonicalTranscriptId, true
}

// HasCanonicalTranscriptId returns a boolean if a field has been set.
func (o *VariantAnnotationSummary) HasCanonicalTranscriptId() bool {
	if o != nil && !isNil(o.CanonicalTranscriptId) {
		return true
	}

	return false
}

// SetCanonicalTranscriptId gets a reference to the given string and assigns it to the CanonicalTranscriptId field.
func (o *VariantAnnotationSummary) SetCanonicalTranscriptId(v string) {
	o.CanonicalTranscriptId = &v
}

// GetGenomicLocation returns the GenomicLocation field value if set, zero value otherwise.
func (o *VariantAnnotationSummary) GetGenomicLocation() GenomicLocation {
	if o == nil || isNil(o.GenomicLocation) {
		var ret GenomicLocation
		return ret
	}
	return *o.GenomicLocation
}

// GetGenomicLocationOk returns a tuple with the GenomicLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotationSummary) GetGenomicLocationOk() (*GenomicLocation, bool) {
	if o == nil || isNil(o.GenomicLocation) {
    return nil, false
	}
	return o.GenomicLocation, true
}

// HasGenomicLocation returns a boolean if a field has been set.
func (o *VariantAnnotationSummary) HasGenomicLocation() bool {
	if o != nil && !isNil(o.GenomicLocation) {
		return true
	}

	return false
}

// SetGenomicLocation gets a reference to the given GenomicLocation and assigns it to the GenomicLocation field.
func (o *VariantAnnotationSummary) SetGenomicLocation(v GenomicLocation) {
	o.GenomicLocation = &v
}

// GetStrandSign returns the StrandSign field value if set, zero value otherwise.
func (o *VariantAnnotationSummary) GetStrandSign() string {
	if o == nil || isNil(o.StrandSign) {
		var ret string
		return ret
	}
	return *o.StrandSign
}

// GetStrandSignOk returns a tuple with the StrandSign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotationSummary) GetStrandSignOk() (*string, bool) {
	if o == nil || isNil(o.StrandSign) {
    return nil, false
	}
	return o.StrandSign, true
}

// HasStrandSign returns a boolean if a field has been set.
func (o *VariantAnnotationSummary) HasStrandSign() bool {
	if o != nil && !isNil(o.StrandSign) {
		return true
	}

	return false
}

// SetStrandSign gets a reference to the given string and assigns it to the StrandSign field.
func (o *VariantAnnotationSummary) SetStrandSign(v string) {
	o.StrandSign = &v
}

// GetTranscriptConsequenceSummaries returns the TranscriptConsequenceSummaries field value
func (o *VariantAnnotationSummary) GetTranscriptConsequenceSummaries() []TranscriptConsequenceSummary {
	if o == nil {
		var ret []TranscriptConsequenceSummary
		return ret
	}

	return o.TranscriptConsequenceSummaries
}

// GetTranscriptConsequenceSummariesOk returns a tuple with the TranscriptConsequenceSummaries field value
// and a boolean to check if the value has been set.
func (o *VariantAnnotationSummary) GetTranscriptConsequenceSummariesOk() ([]TranscriptConsequenceSummary, bool) {
	if o == nil {
    return nil, false
	}
	return o.TranscriptConsequenceSummaries, true
}

// SetTranscriptConsequenceSummaries sets field value
func (o *VariantAnnotationSummary) SetTranscriptConsequenceSummaries(v []TranscriptConsequenceSummary) {
	o.TranscriptConsequenceSummaries = v
}

// GetTranscriptConsequenceSummary returns the TranscriptConsequenceSummary field value
func (o *VariantAnnotationSummary) GetTranscriptConsequenceSummary() TranscriptConsequenceSummary {
	if o == nil {
		var ret TranscriptConsequenceSummary
		return ret
	}

	return o.TranscriptConsequenceSummary
}

// GetTranscriptConsequenceSummaryOk returns a tuple with the TranscriptConsequenceSummary field value
// and a boolean to check if the value has been set.
func (o *VariantAnnotationSummary) GetTranscriptConsequenceSummaryOk() (*TranscriptConsequenceSummary, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TranscriptConsequenceSummary, true
}

// SetTranscriptConsequenceSummary sets field value
func (o *VariantAnnotationSummary) SetTranscriptConsequenceSummary(v TranscriptConsequenceSummary) {
	o.TranscriptConsequenceSummary = v
}

// GetTranscriptConsequences returns the TranscriptConsequences field value
func (o *VariantAnnotationSummary) GetTranscriptConsequences() []TranscriptConsequenceSummary {
	if o == nil {
		var ret []TranscriptConsequenceSummary
		return ret
	}

	return o.TranscriptConsequences
}

// GetTranscriptConsequencesOk returns a tuple with the TranscriptConsequences field value
// and a boolean to check if the value has been set.
func (o *VariantAnnotationSummary) GetTranscriptConsequencesOk() ([]TranscriptConsequenceSummary, bool) {
	if o == nil {
    return nil, false
	}
	return o.TranscriptConsequences, true
}

// SetTranscriptConsequences sets field value
func (o *VariantAnnotationSummary) SetTranscriptConsequences(v []TranscriptConsequenceSummary) {
	o.TranscriptConsequences = v
}

// GetVariant returns the Variant field value
func (o *VariantAnnotationSummary) GetVariant() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Variant
}

// GetVariantOk returns a tuple with the Variant field value
// and a boolean to check if the value has been set.
func (o *VariantAnnotationSummary) GetVariantOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Variant, true
}

// SetVariant sets field value
func (o *VariantAnnotationSummary) SetVariant(v string) {
	o.Variant = v
}

// GetVariantType returns the VariantType field value if set, zero value otherwise.
func (o *VariantAnnotationSummary) GetVariantType() string {
	if o == nil || isNil(o.VariantType) {
		var ret string
		return ret
	}
	return *o.VariantType
}

// GetVariantTypeOk returns a tuple with the VariantType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotationSummary) GetVariantTypeOk() (*string, bool) {
	if o == nil || isNil(o.VariantType) {
    return nil, false
	}
	return o.VariantType, true
}

// HasVariantType returns a boolean if a field has been set.
func (o *VariantAnnotationSummary) HasVariantType() bool {
	if o != nil && !isNil(o.VariantType) {
		return true
	}

	return false
}

// SetVariantType gets a reference to the given string and assigns it to the VariantType field.
func (o *VariantAnnotationSummary) SetVariantType(v string) {
	o.VariantType = &v
}

// GetVues returns the Vues field value if set, zero value otherwise.
func (o *VariantAnnotationSummary) GetVues() Vues {
	if o == nil || isNil(o.Vues) {
		var ret Vues
		return ret
	}
	return *o.Vues
}

// GetVuesOk returns a tuple with the Vues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantAnnotationSummary) GetVuesOk() (*Vues, bool) {
	if o == nil || isNil(o.Vues) {
    return nil, false
	}
	return o.Vues, true
}

// HasVues returns a boolean if a field has been set.
func (o *VariantAnnotationSummary) HasVues() bool {
	if o != nil && !isNil(o.Vues) {
		return true
	}

	return false
}

// SetVues gets a reference to the given Vues and assigns it to the Vues field.
func (o *VariantAnnotationSummary) SetVues(v Vues) {
	o.Vues = &v
}

func (o VariantAnnotationSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AssemblyName) {
		toSerialize["assemblyName"] = o.AssemblyName
	}
	if !isNil(o.CanonicalTranscriptId) {
		toSerialize["canonicalTranscriptId"] = o.CanonicalTranscriptId
	}
	if !isNil(o.GenomicLocation) {
		toSerialize["genomicLocation"] = o.GenomicLocation
	}
	if !isNil(o.StrandSign) {
		toSerialize["strandSign"] = o.StrandSign
	}
	if true {
		toSerialize["transcriptConsequenceSummaries"] = o.TranscriptConsequenceSummaries
	}
	if true {
		toSerialize["transcriptConsequenceSummary"] = o.TranscriptConsequenceSummary
	}
	if true {
		toSerialize["transcriptConsequences"] = o.TranscriptConsequences
	}
	if true {
		toSerialize["variant"] = o.Variant
	}
	if !isNil(o.VariantType) {
		toSerialize["variantType"] = o.VariantType
	}
	if !isNil(o.Vues) {
		toSerialize["vues"] = o.Vues
	}
	return json.Marshal(toSerialize)
}

type NullableVariantAnnotationSummary struct {
	value *VariantAnnotationSummary
	isSet bool
}

func (v NullableVariantAnnotationSummary) Get() *VariantAnnotationSummary {
	return v.value
}

func (v *NullableVariantAnnotationSummary) Set(val *VariantAnnotationSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVariantAnnotationSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVariantAnnotationSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariantAnnotationSummary(val *VariantAnnotationSummary) *NullableVariantAnnotationSummary {
	return &NullableVariantAnnotationSummary{value: val, isSet: true}
}

func (v NullableVariantAnnotationSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariantAnnotationSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


