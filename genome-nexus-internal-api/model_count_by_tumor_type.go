/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"encoding/json"
)

// CountByTumorType struct for CountByTumorType
type CountByTumorType struct {
	// Tumor Type
	TumorType *string `json:"tumorType,omitempty"`
	// Sample count for Tumor Type
	TumorTypeCount *int32 `json:"tumorTypeCount,omitempty"`
	// Variant count for Tumor Type
	VariantCount *int32 `json:"variantCount,omitempty"`
}

// NewCountByTumorType instantiates a new CountByTumorType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountByTumorType() *CountByTumorType {
	this := CountByTumorType{}
	return &this
}

// NewCountByTumorTypeWithDefaults instantiates a new CountByTumorType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountByTumorTypeWithDefaults() *CountByTumorType {
	this := CountByTumorType{}
	return &this
}

// GetTumorType returns the TumorType field value if set, zero value otherwise.
func (o *CountByTumorType) GetTumorType() string {
	if o == nil || isNil(o.TumorType) {
		var ret string
		return ret
	}
	return *o.TumorType
}

// GetTumorTypeOk returns a tuple with the TumorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountByTumorType) GetTumorTypeOk() (*string, bool) {
	if o == nil || isNil(o.TumorType) {
    return nil, false
	}
	return o.TumorType, true
}

// HasTumorType returns a boolean if a field has been set.
func (o *CountByTumorType) HasTumorType() bool {
	if o != nil && !isNil(o.TumorType) {
		return true
	}

	return false
}

// SetTumorType gets a reference to the given string and assigns it to the TumorType field.
func (o *CountByTumorType) SetTumorType(v string) {
	o.TumorType = &v
}

// GetTumorTypeCount returns the TumorTypeCount field value if set, zero value otherwise.
func (o *CountByTumorType) GetTumorTypeCount() int32 {
	if o == nil || isNil(o.TumorTypeCount) {
		var ret int32
		return ret
	}
	return *o.TumorTypeCount
}

// GetTumorTypeCountOk returns a tuple with the TumorTypeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountByTumorType) GetTumorTypeCountOk() (*int32, bool) {
	if o == nil || isNil(o.TumorTypeCount) {
    return nil, false
	}
	return o.TumorTypeCount, true
}

// HasTumorTypeCount returns a boolean if a field has been set.
func (o *CountByTumorType) HasTumorTypeCount() bool {
	if o != nil && !isNil(o.TumorTypeCount) {
		return true
	}

	return false
}

// SetTumorTypeCount gets a reference to the given int32 and assigns it to the TumorTypeCount field.
func (o *CountByTumorType) SetTumorTypeCount(v int32) {
	o.TumorTypeCount = &v
}

// GetVariantCount returns the VariantCount field value if set, zero value otherwise.
func (o *CountByTumorType) GetVariantCount() int32 {
	if o == nil || isNil(o.VariantCount) {
		var ret int32
		return ret
	}
	return *o.VariantCount
}

// GetVariantCountOk returns a tuple with the VariantCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountByTumorType) GetVariantCountOk() (*int32, bool) {
	if o == nil || isNil(o.VariantCount) {
    return nil, false
	}
	return o.VariantCount, true
}

// HasVariantCount returns a boolean if a field has been set.
func (o *CountByTumorType) HasVariantCount() bool {
	if o != nil && !isNil(o.VariantCount) {
		return true
	}

	return false
}

// SetVariantCount gets a reference to the given int32 and assigns it to the VariantCount field.
func (o *CountByTumorType) SetVariantCount(v int32) {
	o.VariantCount = &v
}

func (o CountByTumorType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TumorType) {
		toSerialize["tumorType"] = o.TumorType
	}
	if !isNil(o.TumorTypeCount) {
		toSerialize["tumorTypeCount"] = o.TumorTypeCount
	}
	if !isNil(o.VariantCount) {
		toSerialize["variantCount"] = o.VariantCount
	}
	return json.Marshal(toSerialize)
}

type NullableCountByTumorType struct {
	value *CountByTumorType
	isSet bool
}

func (v NullableCountByTumorType) Get() *CountByTumorType {
	return v.value
}

func (v *NullableCountByTumorType) Set(val *CountByTumorType) {
	v.value = val
	v.isSet = true
}

func (v NullableCountByTumorType) IsSet() bool {
	return v.isSet
}

func (v *NullableCountByTumorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountByTumorType(val *CountByTumorType) *NullableCountByTumorType {
	return &NullableCountByTumorType{value: val, isSet: true}
}

func (v NullableCountByTumorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountByTumorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


