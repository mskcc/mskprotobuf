/*
Genome Nexus API

Testing AnnotationControllerApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package genome_nexus_internal_api

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_genome_nexus_internal_api_AnnotationControllerApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test AnnotationControllerApiService FetchVariantAnnotationByGenomicLocationGET", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var genomicLocation string

        resp, httpRes, err := apiClient.AnnotationControllerApi.FetchVariantAnnotationByGenomicLocationGET(context.Background(), genomicLocation).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AnnotationControllerApiService FetchVariantAnnotationByGenomicLocationPOST", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AnnotationControllerApi.FetchVariantAnnotationByGenomicLocationPOST(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AnnotationControllerApiService FetchVariantAnnotationByIdGET", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var variantId string

        resp, httpRes, err := apiClient.AnnotationControllerApi.FetchVariantAnnotationByIdGET(context.Background(), variantId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AnnotationControllerApiService FetchVariantAnnotationByIdPOST", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AnnotationControllerApi.FetchVariantAnnotationByIdPOST(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AnnotationControllerApiService FetchVariantAnnotationGET", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var variant string

        resp, httpRes, err := apiClient.AnnotationControllerApi.FetchVariantAnnotationGET(context.Background(), variant).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AnnotationControllerApiService FetchVariantAnnotationPOST", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AnnotationControllerApi.FetchVariantAnnotationPOST(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
