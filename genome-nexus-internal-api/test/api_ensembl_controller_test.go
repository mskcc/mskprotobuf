/*
Genome Nexus API

Testing EnsemblControllerApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package genome_nexus_internal_api

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_genome_nexus_internal_api_EnsemblControllerApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test EnsemblControllerApiService FetchCanonicalEnsemblGeneIdByEntrezGeneIdGET", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var entrezGeneId string

        resp, httpRes, err := apiClient.EnsemblControllerApi.FetchCanonicalEnsemblGeneIdByEntrezGeneIdGET(context.Background(), entrezGeneId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnsemblControllerApiService FetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOST", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EnsemblControllerApi.FetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOST(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnsemblControllerApiService FetchCanonicalEnsemblGeneIdByHugoSymbolGET", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var hugoSymbol string

        resp, httpRes, err := apiClient.EnsemblControllerApi.FetchCanonicalEnsemblGeneIdByHugoSymbolGET(context.Background(), hugoSymbol).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnsemblControllerApiService FetchCanonicalEnsemblGeneIdByHugoSymbolsPOST", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EnsemblControllerApi.FetchCanonicalEnsemblGeneIdByHugoSymbolsPOST(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnsemblControllerApiService FetchCanonicalEnsemblTranscriptByHugoSymbolGET", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var hugoSymbol string

        resp, httpRes, err := apiClient.EnsemblControllerApi.FetchCanonicalEnsemblTranscriptByHugoSymbolGET(context.Background(), hugoSymbol).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnsemblControllerApiService FetchCanonicalEnsemblTranscriptsByHugoSymbolsPOST", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EnsemblControllerApi.FetchCanonicalEnsemblTranscriptsByHugoSymbolsPOST(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnsemblControllerApiService FetchEnsemblTranscriptByTranscriptIdGET", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transcriptId string

        resp, httpRes, err := apiClient.EnsemblControllerApi.FetchEnsemblTranscriptByTranscriptIdGET(context.Background(), transcriptId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnsemblControllerApiService FetchEnsemblTranscriptsByEnsemblFilterPOST", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EnsemblControllerApi.FetchEnsemblTranscriptsByEnsemblFilterPOST(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnsemblControllerApiService FetchEnsemblTranscriptsGET", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EnsemblControllerApi.FetchEnsemblTranscriptsGET(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnsemblControllerApiService FetchGeneXrefsGET", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EnsemblControllerApi.FetchGeneXrefsGET(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
