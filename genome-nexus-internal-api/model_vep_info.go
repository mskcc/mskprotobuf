/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"encoding/json"
)

// VEPInfo struct for VEPInfo
type VEPInfo struct {
	Cache *Version `json:"cache,omitempty"`
	Comment *string `json:"comment,omitempty"`
	Server *Version `json:"server,omitempty"`
}

// NewVEPInfo instantiates a new VEPInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVEPInfo() *VEPInfo {
	this := VEPInfo{}
	return &this
}

// NewVEPInfoWithDefaults instantiates a new VEPInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVEPInfoWithDefaults() *VEPInfo {
	this := VEPInfo{}
	return &this
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *VEPInfo) GetCache() Version {
	if o == nil || isNil(o.Cache) {
		var ret Version
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VEPInfo) GetCacheOk() (*Version, bool) {
	if o == nil || isNil(o.Cache) {
    return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *VEPInfo) HasCache() bool {
	if o != nil && !isNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given Version and assigns it to the Cache field.
func (o *VEPInfo) SetCache(v Version) {
	o.Cache = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *VEPInfo) GetComment() string {
	if o == nil || isNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VEPInfo) GetCommentOk() (*string, bool) {
	if o == nil || isNil(o.Comment) {
    return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *VEPInfo) HasComment() bool {
	if o != nil && !isNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *VEPInfo) SetComment(v string) {
	o.Comment = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *VEPInfo) GetServer() Version {
	if o == nil || isNil(o.Server) {
		var ret Version
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VEPInfo) GetServerOk() (*Version, bool) {
	if o == nil || isNil(o.Server) {
    return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *VEPInfo) HasServer() bool {
	if o != nil && !isNil(o.Server) {
		return true
	}

	return false
}

// SetServer gets a reference to the given Version and assigns it to the Server field.
func (o *VEPInfo) SetServer(v Version) {
	o.Server = &v
}

func (o VEPInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}
	if !isNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !isNil(o.Server) {
		toSerialize["server"] = o.Server
	}
	return json.Marshal(toSerialize)
}

type NullableVEPInfo struct {
	value *VEPInfo
	isSet bool
}

func (v NullableVEPInfo) Get() *VEPInfo {
	return v.value
}

func (v *NullableVEPInfo) Set(val *VEPInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVEPInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVEPInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVEPInfo(val *VEPInfo) *NullableVEPInfo {
	return &NullableVEPInfo{value: val, isSet: true}
}

func (v NullableVEPInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVEPInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


