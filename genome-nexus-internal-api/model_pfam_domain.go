/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"encoding/json"
)

// PfamDomain struct for PfamDomain
type PfamDomain struct {
	// PFAM domain description
	Description *string `json:"description,omitempty"`
	// PFAM domain name
	Name string `json:"name"`
	// PFAM domain accession
	PfamAccession string `json:"pfamAccession"`
}

// NewPfamDomain instantiates a new PfamDomain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPfamDomain(name string, pfamAccession string) *PfamDomain {
	this := PfamDomain{}
	this.Name = name
	this.PfamAccession = pfamAccession
	return &this
}

// NewPfamDomainWithDefaults instantiates a new PfamDomain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPfamDomainWithDefaults() *PfamDomain {
	this := PfamDomain{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PfamDomain) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PfamDomain) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PfamDomain) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PfamDomain) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *PfamDomain) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PfamDomain) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PfamDomain) SetName(v string) {
	o.Name = v
}

// GetPfamAccession returns the PfamAccession field value
func (o *PfamDomain) GetPfamAccession() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PfamAccession
}

// GetPfamAccessionOk returns a tuple with the PfamAccession field value
// and a boolean to check if the value has been set.
func (o *PfamDomain) GetPfamAccessionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PfamAccession, true
}

// SetPfamAccession sets field value
func (o *PfamDomain) SetPfamAccession(v string) {
	o.PfamAccession = v
}

func (o PfamDomain) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["pfamAccession"] = o.PfamAccession
	}
	return json.Marshal(toSerialize)
}

type NullablePfamDomain struct {
	value *PfamDomain
	isSet bool
}

func (v NullablePfamDomain) Get() *PfamDomain {
	return v.value
}

func (v *NullablePfamDomain) Set(val *PfamDomain) {
	v.value = val
	v.isSet = true
}

func (v NullablePfamDomain) IsSet() bool {
	return v.isSet
}

func (v *NullablePfamDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePfamDomain(val *PfamDomain) *NullablePfamDomain {
	return &NullablePfamDomain{value: val, isSet: true}
}

func (v NullablePfamDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePfamDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


