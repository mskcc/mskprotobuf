/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// PfamControllerApiService PfamControllerApi service
type PfamControllerApiService service

type ApiFetchPfamDomainsByAccessionGETRequest struct {
	ctx context.Context
	ApiService *PfamControllerApiService
	pfamAccession string
}

func (r ApiFetchPfamDomainsByAccessionGETRequest) Execute() (*PfamDomain, *http.Response, error) {
	return r.ApiService.FetchPfamDomainsByAccessionGETExecute(r)
}

/*
FetchPfamDomainsByAccessionGET Retrieves a PFAM domain by a PFAM domain ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pfamAccession A PFAM domain accession ID. For example PF02827
 @return ApiFetchPfamDomainsByAccessionGETRequest
*/
func (a *PfamControllerApiService) FetchPfamDomainsByAccessionGET(ctx context.Context, pfamAccession string) ApiFetchPfamDomainsByAccessionGETRequest {
	return ApiFetchPfamDomainsByAccessionGETRequest{
		ApiService: a,
		ctx: ctx,
		pfamAccession: pfamAccession,
	}
}

// Execute executes the request
//  @return PfamDomain
func (a *PfamControllerApiService) FetchPfamDomainsByAccessionGETExecute(r ApiFetchPfamDomainsByAccessionGETRequest) (*PfamDomain, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PfamDomain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PfamControllerApiService.FetchPfamDomainsByAccessionGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pfam/domain/{pfamAccession}"
	localVarPath = strings.Replace(localVarPath, "{"+"pfamAccession"+"}", url.PathEscape(parameterToString(r.pfamAccession, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchPfamDomainsByPfamAccessionPOSTRequest struct {
	ctx context.Context
	ApiService *PfamControllerApiService
	pfamAccessions *[]string
}

// List of PFAM domain accession IDs. For example [\&quot;PF02827\&quot;,\&quot;PF00093\&quot;,\&quot;PF15276\&quot;]
func (r ApiFetchPfamDomainsByPfamAccessionPOSTRequest) PfamAccessions(pfamAccessions []string) ApiFetchPfamDomainsByPfamAccessionPOSTRequest {
	r.pfamAccessions = &pfamAccessions
	return r
}

func (r ApiFetchPfamDomainsByPfamAccessionPOSTRequest) Execute() ([]PfamDomain, *http.Response, error) {
	return r.ApiService.FetchPfamDomainsByPfamAccessionPOSTExecute(r)
}

/*
FetchPfamDomainsByPfamAccessionPOST Retrieves PFAM domains by PFAM domain accession IDs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFetchPfamDomainsByPfamAccessionPOSTRequest
*/
func (a *PfamControllerApiService) FetchPfamDomainsByPfamAccessionPOST(ctx context.Context) ApiFetchPfamDomainsByPfamAccessionPOSTRequest {
	return ApiFetchPfamDomainsByPfamAccessionPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PfamDomain
func (a *PfamControllerApiService) FetchPfamDomainsByPfamAccessionPOSTExecute(r ApiFetchPfamDomainsByPfamAccessionPOSTRequest) ([]PfamDomain, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PfamDomain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PfamControllerApiService.FetchPfamDomainsByPfamAccessionPOST")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pfam/domain"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pfamAccessions == nil {
		return localVarReturnValue, nil, reportError("pfamAccessions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.pfamAccessions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
