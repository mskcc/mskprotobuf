/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"encoding/json"
)

// Dbsnp struct for Dbsnp
type Dbsnp struct {
	// class
	Class *string `json:"_class,omitempty"`
	// allele_origin
	AlleleOrigin *string `json:"alleleOrigin,omitempty"`
	// alleles
	Alleles []Alleles `json:"alleles,omitempty"`
	// alt
	Alt *string `json:"alt,omitempty"`
	// chrom
	Chrom *string `json:"chrom,omitempty"`
	// dbsnp_build
	DbsnpBuild *int32 `json:"dbsnpBuild,omitempty"`
	// flags
	Flags []string `json:"flags,omitempty"`
	Hg19 *Hg19 `json:"hg19,omitempty"`
	// _license
	License *string `json:"license,omitempty"`
	// ref
	Ref *string `json:"ref,omitempty"`
	// rsid
	Rsid *string `json:"rsid,omitempty"`
	// validated
	Validated *bool `json:"validated,omitempty"`
	// var_subtype
	VarSubtype *string `json:"varSubtype,omitempty"`
	// vartype
	Vartype *string `json:"vartype,omitempty"`
}

// NewDbsnp instantiates a new Dbsnp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbsnp() *Dbsnp {
	this := Dbsnp{}
	return &this
}

// NewDbsnpWithDefaults instantiates a new Dbsnp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbsnpWithDefaults() *Dbsnp {
	this := Dbsnp{}
	return &this
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *Dbsnp) GetClass() string {
	if o == nil || isNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetClassOk() (*string, bool) {
	if o == nil || isNil(o.Class) {
    return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *Dbsnp) HasClass() bool {
	if o != nil && !isNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *Dbsnp) SetClass(v string) {
	o.Class = &v
}

// GetAlleleOrigin returns the AlleleOrigin field value if set, zero value otherwise.
func (o *Dbsnp) GetAlleleOrigin() string {
	if o == nil || isNil(o.AlleleOrigin) {
		var ret string
		return ret
	}
	return *o.AlleleOrigin
}

// GetAlleleOriginOk returns a tuple with the AlleleOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetAlleleOriginOk() (*string, bool) {
	if o == nil || isNil(o.AlleleOrigin) {
    return nil, false
	}
	return o.AlleleOrigin, true
}

// HasAlleleOrigin returns a boolean if a field has been set.
func (o *Dbsnp) HasAlleleOrigin() bool {
	if o != nil && !isNil(o.AlleleOrigin) {
		return true
	}

	return false
}

// SetAlleleOrigin gets a reference to the given string and assigns it to the AlleleOrigin field.
func (o *Dbsnp) SetAlleleOrigin(v string) {
	o.AlleleOrigin = &v
}

// GetAlleles returns the Alleles field value if set, zero value otherwise.
func (o *Dbsnp) GetAlleles() []Alleles {
	if o == nil || isNil(o.Alleles) {
		var ret []Alleles
		return ret
	}
	return o.Alleles
}

// GetAllelesOk returns a tuple with the Alleles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetAllelesOk() ([]Alleles, bool) {
	if o == nil || isNil(o.Alleles) {
    return nil, false
	}
	return o.Alleles, true
}

// HasAlleles returns a boolean if a field has been set.
func (o *Dbsnp) HasAlleles() bool {
	if o != nil && !isNil(o.Alleles) {
		return true
	}

	return false
}

// SetAlleles gets a reference to the given []Alleles and assigns it to the Alleles field.
func (o *Dbsnp) SetAlleles(v []Alleles) {
	o.Alleles = v
}

// GetAlt returns the Alt field value if set, zero value otherwise.
func (o *Dbsnp) GetAlt() string {
	if o == nil || isNil(o.Alt) {
		var ret string
		return ret
	}
	return *o.Alt
}

// GetAltOk returns a tuple with the Alt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetAltOk() (*string, bool) {
	if o == nil || isNil(o.Alt) {
    return nil, false
	}
	return o.Alt, true
}

// HasAlt returns a boolean if a field has been set.
func (o *Dbsnp) HasAlt() bool {
	if o != nil && !isNil(o.Alt) {
		return true
	}

	return false
}

// SetAlt gets a reference to the given string and assigns it to the Alt field.
func (o *Dbsnp) SetAlt(v string) {
	o.Alt = &v
}

// GetChrom returns the Chrom field value if set, zero value otherwise.
func (o *Dbsnp) GetChrom() string {
	if o == nil || isNil(o.Chrom) {
		var ret string
		return ret
	}
	return *o.Chrom
}

// GetChromOk returns a tuple with the Chrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetChromOk() (*string, bool) {
	if o == nil || isNil(o.Chrom) {
    return nil, false
	}
	return o.Chrom, true
}

// HasChrom returns a boolean if a field has been set.
func (o *Dbsnp) HasChrom() bool {
	if o != nil && !isNil(o.Chrom) {
		return true
	}

	return false
}

// SetChrom gets a reference to the given string and assigns it to the Chrom field.
func (o *Dbsnp) SetChrom(v string) {
	o.Chrom = &v
}

// GetDbsnpBuild returns the DbsnpBuild field value if set, zero value otherwise.
func (o *Dbsnp) GetDbsnpBuild() int32 {
	if o == nil || isNil(o.DbsnpBuild) {
		var ret int32
		return ret
	}
	return *o.DbsnpBuild
}

// GetDbsnpBuildOk returns a tuple with the DbsnpBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetDbsnpBuildOk() (*int32, bool) {
	if o == nil || isNil(o.DbsnpBuild) {
    return nil, false
	}
	return o.DbsnpBuild, true
}

// HasDbsnpBuild returns a boolean if a field has been set.
func (o *Dbsnp) HasDbsnpBuild() bool {
	if o != nil && !isNil(o.DbsnpBuild) {
		return true
	}

	return false
}

// SetDbsnpBuild gets a reference to the given int32 and assigns it to the DbsnpBuild field.
func (o *Dbsnp) SetDbsnpBuild(v int32) {
	o.DbsnpBuild = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *Dbsnp) GetFlags() []string {
	if o == nil || isNil(o.Flags) {
		var ret []string
		return ret
	}
	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetFlagsOk() ([]string, bool) {
	if o == nil || isNil(o.Flags) {
    return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *Dbsnp) HasFlags() bool {
	if o != nil && !isNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given []string and assigns it to the Flags field.
func (o *Dbsnp) SetFlags(v []string) {
	o.Flags = v
}

// GetHg19 returns the Hg19 field value if set, zero value otherwise.
func (o *Dbsnp) GetHg19() Hg19 {
	if o == nil || isNil(o.Hg19) {
		var ret Hg19
		return ret
	}
	return *o.Hg19
}

// GetHg19Ok returns a tuple with the Hg19 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetHg19Ok() (*Hg19, bool) {
	if o == nil || isNil(o.Hg19) {
    return nil, false
	}
	return o.Hg19, true
}

// HasHg19 returns a boolean if a field has been set.
func (o *Dbsnp) HasHg19() bool {
	if o != nil && !isNil(o.Hg19) {
		return true
	}

	return false
}

// SetHg19 gets a reference to the given Hg19 and assigns it to the Hg19 field.
func (o *Dbsnp) SetHg19(v Hg19) {
	o.Hg19 = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *Dbsnp) GetLicense() string {
	if o == nil || isNil(o.License) {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetLicenseOk() (*string, bool) {
	if o == nil || isNil(o.License) {
    return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *Dbsnp) HasLicense() bool {
	if o != nil && !isNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *Dbsnp) SetLicense(v string) {
	o.License = &v
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Dbsnp) GetRef() string {
	if o == nil || isNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetRefOk() (*string, bool) {
	if o == nil || isNil(o.Ref) {
    return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Dbsnp) HasRef() bool {
	if o != nil && !isNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Dbsnp) SetRef(v string) {
	o.Ref = &v
}

// GetRsid returns the Rsid field value if set, zero value otherwise.
func (o *Dbsnp) GetRsid() string {
	if o == nil || isNil(o.Rsid) {
		var ret string
		return ret
	}
	return *o.Rsid
}

// GetRsidOk returns a tuple with the Rsid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetRsidOk() (*string, bool) {
	if o == nil || isNil(o.Rsid) {
    return nil, false
	}
	return o.Rsid, true
}

// HasRsid returns a boolean if a field has been set.
func (o *Dbsnp) HasRsid() bool {
	if o != nil && !isNil(o.Rsid) {
		return true
	}

	return false
}

// SetRsid gets a reference to the given string and assigns it to the Rsid field.
func (o *Dbsnp) SetRsid(v string) {
	o.Rsid = &v
}

// GetValidated returns the Validated field value if set, zero value otherwise.
func (o *Dbsnp) GetValidated() bool {
	if o == nil || isNil(o.Validated) {
		var ret bool
		return ret
	}
	return *o.Validated
}

// GetValidatedOk returns a tuple with the Validated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetValidatedOk() (*bool, bool) {
	if o == nil || isNil(o.Validated) {
    return nil, false
	}
	return o.Validated, true
}

// HasValidated returns a boolean if a field has been set.
func (o *Dbsnp) HasValidated() bool {
	if o != nil && !isNil(o.Validated) {
		return true
	}

	return false
}

// SetValidated gets a reference to the given bool and assigns it to the Validated field.
func (o *Dbsnp) SetValidated(v bool) {
	o.Validated = &v
}

// GetVarSubtype returns the VarSubtype field value if set, zero value otherwise.
func (o *Dbsnp) GetVarSubtype() string {
	if o == nil || isNil(o.VarSubtype) {
		var ret string
		return ret
	}
	return *o.VarSubtype
}

// GetVarSubtypeOk returns a tuple with the VarSubtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetVarSubtypeOk() (*string, bool) {
	if o == nil || isNil(o.VarSubtype) {
    return nil, false
	}
	return o.VarSubtype, true
}

// HasVarSubtype returns a boolean if a field has been set.
func (o *Dbsnp) HasVarSubtype() bool {
	if o != nil && !isNil(o.VarSubtype) {
		return true
	}

	return false
}

// SetVarSubtype gets a reference to the given string and assigns it to the VarSubtype field.
func (o *Dbsnp) SetVarSubtype(v string) {
	o.VarSubtype = &v
}

// GetVartype returns the Vartype field value if set, zero value otherwise.
func (o *Dbsnp) GetVartype() string {
	if o == nil || isNil(o.Vartype) {
		var ret string
		return ret
	}
	return *o.Vartype
}

// GetVartypeOk returns a tuple with the Vartype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnp) GetVartypeOk() (*string, bool) {
	if o == nil || isNil(o.Vartype) {
    return nil, false
	}
	return o.Vartype, true
}

// HasVartype returns a boolean if a field has been set.
func (o *Dbsnp) HasVartype() bool {
	if o != nil && !isNil(o.Vartype) {
		return true
	}

	return false
}

// SetVartype gets a reference to the given string and assigns it to the Vartype field.
func (o *Dbsnp) SetVartype(v string) {
	o.Vartype = &v
}

func (o Dbsnp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Class) {
		toSerialize["_class"] = o.Class
	}
	if !isNil(o.AlleleOrigin) {
		toSerialize["alleleOrigin"] = o.AlleleOrigin
	}
	if !isNil(o.Alleles) {
		toSerialize["alleles"] = o.Alleles
	}
	if !isNil(o.Alt) {
		toSerialize["alt"] = o.Alt
	}
	if !isNil(o.Chrom) {
		toSerialize["chrom"] = o.Chrom
	}
	if !isNil(o.DbsnpBuild) {
		toSerialize["dbsnpBuild"] = o.DbsnpBuild
	}
	if !isNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}
	if !isNil(o.Hg19) {
		toSerialize["hg19"] = o.Hg19
	}
	if !isNil(o.License) {
		toSerialize["license"] = o.License
	}
	if !isNil(o.Ref) {
		toSerialize["ref"] = o.Ref
	}
	if !isNil(o.Rsid) {
		toSerialize["rsid"] = o.Rsid
	}
	if !isNil(o.Validated) {
		toSerialize["validated"] = o.Validated
	}
	if !isNil(o.VarSubtype) {
		toSerialize["varSubtype"] = o.VarSubtype
	}
	if !isNil(o.Vartype) {
		toSerialize["vartype"] = o.Vartype
	}
	return json.Marshal(toSerialize)
}

type NullableDbsnp struct {
	value *Dbsnp
	isSet bool
}

func (v NullableDbsnp) Get() *Dbsnp {
	return v.value
}

func (v *NullableDbsnp) Set(val *Dbsnp) {
	v.value = val
	v.isSet = true
}

func (v NullableDbsnp) IsSet() bool {
	return v.isSet
}

func (v *NullableDbsnp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbsnp(val *Dbsnp) *NullableDbsnp {
	return &NullableDbsnp{value: val, isSet: true}
}

func (v NullableDbsnp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbsnp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


