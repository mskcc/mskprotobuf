/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"encoding/json"
)

// MainType OncoTree Cancer Type
type MainType struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	TumorForm *string `json:"tumorForm,omitempty"`
}

// NewMainType instantiates a new MainType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMainType() *MainType {
	this := MainType{}
	return &this
}

// NewMainTypeWithDefaults instantiates a new MainType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMainTypeWithDefaults() *MainType {
	this := MainType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MainType) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainType) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MainType) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MainType) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MainType) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainType) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MainType) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MainType) SetName(v string) {
	o.Name = &v
}

// GetTumorForm returns the TumorForm field value if set, zero value otherwise.
func (o *MainType) GetTumorForm() string {
	if o == nil || isNil(o.TumorForm) {
		var ret string
		return ret
	}
	return *o.TumorForm
}

// GetTumorFormOk returns a tuple with the TumorForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainType) GetTumorFormOk() (*string, bool) {
	if o == nil || isNil(o.TumorForm) {
    return nil, false
	}
	return o.TumorForm, true
}

// HasTumorForm returns a boolean if a field has been set.
func (o *MainType) HasTumorForm() bool {
	if o != nil && !isNil(o.TumorForm) {
		return true
	}

	return false
}

// SetTumorForm gets a reference to the given string and assigns it to the TumorForm field.
func (o *MainType) SetTumorForm(v string) {
	o.TumorForm = &v
}

func (o MainType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.TumorForm) {
		toSerialize["tumorForm"] = o.TumorForm
	}
	return json.Marshal(toSerialize)
}

type NullableMainType struct {
	value *MainType
	isSet bool
}

func (v NullableMainType) Get() *MainType {
	return v.value
}

func (v *NullableMainType) Set(val *MainType) {
	v.value = val
	v.isSet = true
}

func (v NullableMainType) IsSet() bool {
	return v.isSet
}

func (v *NullableMainType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMainType(val *MainType) *NullableMainType {
	return &NullableMainType{value: val, isSet: true}
}

func (v NullableMainType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMainType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


