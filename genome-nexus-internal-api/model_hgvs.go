/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"encoding/json"
)

// Hgvs struct for Hgvs
type Hgvs struct {
	Coding []string `json:"coding,omitempty"`
	Genomic []string `json:"genomic,omitempty"`
	Protein []string `json:"protein,omitempty"`
}

// NewHgvs instantiates a new Hgvs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHgvs() *Hgvs {
	this := Hgvs{}
	return &this
}

// NewHgvsWithDefaults instantiates a new Hgvs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHgvsWithDefaults() *Hgvs {
	this := Hgvs{}
	return &this
}

// GetCoding returns the Coding field value if set, zero value otherwise.
func (o *Hgvs) GetCoding() []string {
	if o == nil || isNil(o.Coding) {
		var ret []string
		return ret
	}
	return o.Coding
}

// GetCodingOk returns a tuple with the Coding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hgvs) GetCodingOk() ([]string, bool) {
	if o == nil || isNil(o.Coding) {
    return nil, false
	}
	return o.Coding, true
}

// HasCoding returns a boolean if a field has been set.
func (o *Hgvs) HasCoding() bool {
	if o != nil && !isNil(o.Coding) {
		return true
	}

	return false
}

// SetCoding gets a reference to the given []string and assigns it to the Coding field.
func (o *Hgvs) SetCoding(v []string) {
	o.Coding = v
}

// GetGenomic returns the Genomic field value if set, zero value otherwise.
func (o *Hgvs) GetGenomic() []string {
	if o == nil || isNil(o.Genomic) {
		var ret []string
		return ret
	}
	return o.Genomic
}

// GetGenomicOk returns a tuple with the Genomic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hgvs) GetGenomicOk() ([]string, bool) {
	if o == nil || isNil(o.Genomic) {
    return nil, false
	}
	return o.Genomic, true
}

// HasGenomic returns a boolean if a field has been set.
func (o *Hgvs) HasGenomic() bool {
	if o != nil && !isNil(o.Genomic) {
		return true
	}

	return false
}

// SetGenomic gets a reference to the given []string and assigns it to the Genomic field.
func (o *Hgvs) SetGenomic(v []string) {
	o.Genomic = v
}

// GetProtein returns the Protein field value if set, zero value otherwise.
func (o *Hgvs) GetProtein() []string {
	if o == nil || isNil(o.Protein) {
		var ret []string
		return ret
	}
	return o.Protein
}

// GetProteinOk returns a tuple with the Protein field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hgvs) GetProteinOk() ([]string, bool) {
	if o == nil || isNil(o.Protein) {
    return nil, false
	}
	return o.Protein, true
}

// HasProtein returns a boolean if a field has been set.
func (o *Hgvs) HasProtein() bool {
	if o != nil && !isNil(o.Protein) {
		return true
	}

	return false
}

// SetProtein gets a reference to the given []string and assigns it to the Protein field.
func (o *Hgvs) SetProtein(v []string) {
	o.Protein = v
}

func (o Hgvs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Coding) {
		toSerialize["coding"] = o.Coding
	}
	if !isNil(o.Genomic) {
		toSerialize["genomic"] = o.Genomic
	}
	if !isNil(o.Protein) {
		toSerialize["protein"] = o.Protein
	}
	return json.Marshal(toSerialize)
}

type NullableHgvs struct {
	value *Hgvs
	isSet bool
}

func (v NullableHgvs) Get() *Hgvs {
	return v.value
}

func (v *NullableHgvs) Set(val *Hgvs) {
	v.value = val
	v.isSet = true
}

func (v NullableHgvs) IsSet() bool {
	return v.isSet
}

func (v *NullableHgvs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHgvs(val *Hgvs) *NullableHgvs {
	return &NullableHgvs{value: val, isSet: true}
}

func (v NullableHgvs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHgvs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


