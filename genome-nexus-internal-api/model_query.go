/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"encoding/json"
)

// Query struct for Query
type Query struct {
	Alteration *string `json:"alteration,omitempty"`
	AlterationType *string `json:"alterationType,omitempty"`
	Consequence *string `json:"consequence,omitempty"`
	EntrezGeneId *int32 `json:"entrezGeneId,omitempty"`
	Hgvs *string `json:"hgvs,omitempty"`
	HugoSymbol *string `json:"hugoSymbol,omitempty"`
	Id *string `json:"id,omitempty"`
	ProteinEnd *int32 `json:"proteinEnd,omitempty"`
	ProteinStart *int32 `json:"proteinStart,omitempty"`
	SvType *string `json:"svType,omitempty"`
	TumorType *string `json:"tumorType,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewQuery instantiates a new Query object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuery() *Query {
	this := Query{}
	return &this
}

// NewQueryWithDefaults instantiates a new Query object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryWithDefaults() *Query {
	this := Query{}
	return &this
}

// GetAlteration returns the Alteration field value if set, zero value otherwise.
func (o *Query) GetAlteration() string {
	if o == nil || isNil(o.Alteration) {
		var ret string
		return ret
	}
	return *o.Alteration
}

// GetAlterationOk returns a tuple with the Alteration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetAlterationOk() (*string, bool) {
	if o == nil || isNil(o.Alteration) {
    return nil, false
	}
	return o.Alteration, true
}

// HasAlteration returns a boolean if a field has been set.
func (o *Query) HasAlteration() bool {
	if o != nil && !isNil(o.Alteration) {
		return true
	}

	return false
}

// SetAlteration gets a reference to the given string and assigns it to the Alteration field.
func (o *Query) SetAlteration(v string) {
	o.Alteration = &v
}

// GetAlterationType returns the AlterationType field value if set, zero value otherwise.
func (o *Query) GetAlterationType() string {
	if o == nil || isNil(o.AlterationType) {
		var ret string
		return ret
	}
	return *o.AlterationType
}

// GetAlterationTypeOk returns a tuple with the AlterationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetAlterationTypeOk() (*string, bool) {
	if o == nil || isNil(o.AlterationType) {
    return nil, false
	}
	return o.AlterationType, true
}

// HasAlterationType returns a boolean if a field has been set.
func (o *Query) HasAlterationType() bool {
	if o != nil && !isNil(o.AlterationType) {
		return true
	}

	return false
}

// SetAlterationType gets a reference to the given string and assigns it to the AlterationType field.
func (o *Query) SetAlterationType(v string) {
	o.AlterationType = &v
}

// GetConsequence returns the Consequence field value if set, zero value otherwise.
func (o *Query) GetConsequence() string {
	if o == nil || isNil(o.Consequence) {
		var ret string
		return ret
	}
	return *o.Consequence
}

// GetConsequenceOk returns a tuple with the Consequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetConsequenceOk() (*string, bool) {
	if o == nil || isNil(o.Consequence) {
    return nil, false
	}
	return o.Consequence, true
}

// HasConsequence returns a boolean if a field has been set.
func (o *Query) HasConsequence() bool {
	if o != nil && !isNil(o.Consequence) {
		return true
	}

	return false
}

// SetConsequence gets a reference to the given string and assigns it to the Consequence field.
func (o *Query) SetConsequence(v string) {
	o.Consequence = &v
}

// GetEntrezGeneId returns the EntrezGeneId field value if set, zero value otherwise.
func (o *Query) GetEntrezGeneId() int32 {
	if o == nil || isNil(o.EntrezGeneId) {
		var ret int32
		return ret
	}
	return *o.EntrezGeneId
}

// GetEntrezGeneIdOk returns a tuple with the EntrezGeneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetEntrezGeneIdOk() (*int32, bool) {
	if o == nil || isNil(o.EntrezGeneId) {
    return nil, false
	}
	return o.EntrezGeneId, true
}

// HasEntrezGeneId returns a boolean if a field has been set.
func (o *Query) HasEntrezGeneId() bool {
	if o != nil && !isNil(o.EntrezGeneId) {
		return true
	}

	return false
}

// SetEntrezGeneId gets a reference to the given int32 and assigns it to the EntrezGeneId field.
func (o *Query) SetEntrezGeneId(v int32) {
	o.EntrezGeneId = &v
}

// GetHgvs returns the Hgvs field value if set, zero value otherwise.
func (o *Query) GetHgvs() string {
	if o == nil || isNil(o.Hgvs) {
		var ret string
		return ret
	}
	return *o.Hgvs
}

// GetHgvsOk returns a tuple with the Hgvs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetHgvsOk() (*string, bool) {
	if o == nil || isNil(o.Hgvs) {
    return nil, false
	}
	return o.Hgvs, true
}

// HasHgvs returns a boolean if a field has been set.
func (o *Query) HasHgvs() bool {
	if o != nil && !isNil(o.Hgvs) {
		return true
	}

	return false
}

// SetHgvs gets a reference to the given string and assigns it to the Hgvs field.
func (o *Query) SetHgvs(v string) {
	o.Hgvs = &v
}

// GetHugoSymbol returns the HugoSymbol field value if set, zero value otherwise.
func (o *Query) GetHugoSymbol() string {
	if o == nil || isNil(o.HugoSymbol) {
		var ret string
		return ret
	}
	return *o.HugoSymbol
}

// GetHugoSymbolOk returns a tuple with the HugoSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetHugoSymbolOk() (*string, bool) {
	if o == nil || isNil(o.HugoSymbol) {
    return nil, false
	}
	return o.HugoSymbol, true
}

// HasHugoSymbol returns a boolean if a field has been set.
func (o *Query) HasHugoSymbol() bool {
	if o != nil && !isNil(o.HugoSymbol) {
		return true
	}

	return false
}

// SetHugoSymbol gets a reference to the given string and assigns it to the HugoSymbol field.
func (o *Query) SetHugoSymbol(v string) {
	o.HugoSymbol = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Query) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Query) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Query) SetId(v string) {
	o.Id = &v
}

// GetProteinEnd returns the ProteinEnd field value if set, zero value otherwise.
func (o *Query) GetProteinEnd() int32 {
	if o == nil || isNil(o.ProteinEnd) {
		var ret int32
		return ret
	}
	return *o.ProteinEnd
}

// GetProteinEndOk returns a tuple with the ProteinEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetProteinEndOk() (*int32, bool) {
	if o == nil || isNil(o.ProteinEnd) {
    return nil, false
	}
	return o.ProteinEnd, true
}

// HasProteinEnd returns a boolean if a field has been set.
func (o *Query) HasProteinEnd() bool {
	if o != nil && !isNil(o.ProteinEnd) {
		return true
	}

	return false
}

// SetProteinEnd gets a reference to the given int32 and assigns it to the ProteinEnd field.
func (o *Query) SetProteinEnd(v int32) {
	o.ProteinEnd = &v
}

// GetProteinStart returns the ProteinStart field value if set, zero value otherwise.
func (o *Query) GetProteinStart() int32 {
	if o == nil || isNil(o.ProteinStart) {
		var ret int32
		return ret
	}
	return *o.ProteinStart
}

// GetProteinStartOk returns a tuple with the ProteinStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetProteinStartOk() (*int32, bool) {
	if o == nil || isNil(o.ProteinStart) {
    return nil, false
	}
	return o.ProteinStart, true
}

// HasProteinStart returns a boolean if a field has been set.
func (o *Query) HasProteinStart() bool {
	if o != nil && !isNil(o.ProteinStart) {
		return true
	}

	return false
}

// SetProteinStart gets a reference to the given int32 and assigns it to the ProteinStart field.
func (o *Query) SetProteinStart(v int32) {
	o.ProteinStart = &v
}

// GetSvType returns the SvType field value if set, zero value otherwise.
func (o *Query) GetSvType() string {
	if o == nil || isNil(o.SvType) {
		var ret string
		return ret
	}
	return *o.SvType
}

// GetSvTypeOk returns a tuple with the SvType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetSvTypeOk() (*string, bool) {
	if o == nil || isNil(o.SvType) {
    return nil, false
	}
	return o.SvType, true
}

// HasSvType returns a boolean if a field has been set.
func (o *Query) HasSvType() bool {
	if o != nil && !isNil(o.SvType) {
		return true
	}

	return false
}

// SetSvType gets a reference to the given string and assigns it to the SvType field.
func (o *Query) SetSvType(v string) {
	o.SvType = &v
}

// GetTumorType returns the TumorType field value if set, zero value otherwise.
func (o *Query) GetTumorType() string {
	if o == nil || isNil(o.TumorType) {
		var ret string
		return ret
	}
	return *o.TumorType
}

// GetTumorTypeOk returns a tuple with the TumorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetTumorTypeOk() (*string, bool) {
	if o == nil || isNil(o.TumorType) {
    return nil, false
	}
	return o.TumorType, true
}

// HasTumorType returns a boolean if a field has been set.
func (o *Query) HasTumorType() bool {
	if o != nil && !isNil(o.TumorType) {
		return true
	}

	return false
}

// SetTumorType gets a reference to the given string and assigns it to the TumorType field.
func (o *Query) SetTumorType(v string) {
	o.TumorType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Query) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Query) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Query) SetType(v string) {
	o.Type = &v
}

func (o Query) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Alteration) {
		toSerialize["alteration"] = o.Alteration
	}
	if !isNil(o.AlterationType) {
		toSerialize["alterationType"] = o.AlterationType
	}
	if !isNil(o.Consequence) {
		toSerialize["consequence"] = o.Consequence
	}
	if !isNil(o.EntrezGeneId) {
		toSerialize["entrezGeneId"] = o.EntrezGeneId
	}
	if !isNil(o.Hgvs) {
		toSerialize["hgvs"] = o.Hgvs
	}
	if !isNil(o.HugoSymbol) {
		toSerialize["hugoSymbol"] = o.HugoSymbol
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.ProteinEnd) {
		toSerialize["proteinEnd"] = o.ProteinEnd
	}
	if !isNil(o.ProteinStart) {
		toSerialize["proteinStart"] = o.ProteinStart
	}
	if !isNil(o.SvType) {
		toSerialize["svType"] = o.SvType
	}
	if !isNil(o.TumorType) {
		toSerialize["tumorType"] = o.TumorType
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableQuery struct {
	value *Query
	isSet bool
}

func (v NullableQuery) Get() *Query {
	return v.value
}

func (v *NullableQuery) Set(val *Query) {
	v.value = val
	v.isSet = true
}

func (v NullableQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuery(val *Query) *NullableQuery {
	return &NullableQuery{value: val, isSet: true}
}

func (v NullableQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


