/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"encoding/json"
)

// Citations struct for Citations
type Citations struct {
	Abstracts []ArticleAbstract `json:"abstracts,omitempty"`
	Pmids []string `json:"pmids,omitempty"`
}

// NewCitations instantiates a new Citations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCitations() *Citations {
	this := Citations{}
	return &this
}

// NewCitationsWithDefaults instantiates a new Citations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCitationsWithDefaults() *Citations {
	this := Citations{}
	return &this
}

// GetAbstracts returns the Abstracts field value if set, zero value otherwise.
func (o *Citations) GetAbstracts() []ArticleAbstract {
	if o == nil || isNil(o.Abstracts) {
		var ret []ArticleAbstract
		return ret
	}
	return o.Abstracts
}

// GetAbstractsOk returns a tuple with the Abstracts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Citations) GetAbstractsOk() ([]ArticleAbstract, bool) {
	if o == nil || isNil(o.Abstracts) {
    return nil, false
	}
	return o.Abstracts, true
}

// HasAbstracts returns a boolean if a field has been set.
func (o *Citations) HasAbstracts() bool {
	if o != nil && !isNil(o.Abstracts) {
		return true
	}

	return false
}

// SetAbstracts gets a reference to the given []ArticleAbstract and assigns it to the Abstracts field.
func (o *Citations) SetAbstracts(v []ArticleAbstract) {
	o.Abstracts = v
}

// GetPmids returns the Pmids field value if set, zero value otherwise.
func (o *Citations) GetPmids() []string {
	if o == nil || isNil(o.Pmids) {
		var ret []string
		return ret
	}
	return o.Pmids
}

// GetPmidsOk returns a tuple with the Pmids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Citations) GetPmidsOk() ([]string, bool) {
	if o == nil || isNil(o.Pmids) {
    return nil, false
	}
	return o.Pmids, true
}

// HasPmids returns a boolean if a field has been set.
func (o *Citations) HasPmids() bool {
	if o != nil && !isNil(o.Pmids) {
		return true
	}

	return false
}

// SetPmids gets a reference to the given []string and assigns it to the Pmids field.
func (o *Citations) SetPmids(v []string) {
	o.Pmids = v
}

func (o Citations) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Abstracts) {
		toSerialize["abstracts"] = o.Abstracts
	}
	if !isNil(o.Pmids) {
		toSerialize["pmids"] = o.Pmids
	}
	return json.Marshal(toSerialize)
}

type NullableCitations struct {
	value *Citations
	isSet bool
}

func (v NullableCitations) Get() *Citations {
	return v.value
}

func (v *NullableCitations) Set(val *Citations) {
	v.value = val
	v.isSet = true
}

func (v NullableCitations) IsSet() bool {
	return v.isSet
}

func (v *NullableCitations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCitations(val *Citations) *NullableCitations {
	return &NullableCitations{value: val, isSet: true}
}

func (v NullableCitations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCitations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


