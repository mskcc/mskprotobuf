/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"encoding/json"
)

// Drug struct for Drug
type Drug struct {
	DrugName *string `json:"drugName,omitempty"`
	NcitCode *string `json:"ncitCode,omitempty"`
	Synonyms []string `json:"synonyms,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
}

// NewDrug instantiates a new Drug object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDrug() *Drug {
	this := Drug{}
	return &this
}

// NewDrugWithDefaults instantiates a new Drug object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDrugWithDefaults() *Drug {
	this := Drug{}
	return &this
}

// GetDrugName returns the DrugName field value if set, zero value otherwise.
func (o *Drug) GetDrugName() string {
	if o == nil || isNil(o.DrugName) {
		var ret string
		return ret
	}
	return *o.DrugName
}

// GetDrugNameOk returns a tuple with the DrugName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drug) GetDrugNameOk() (*string, bool) {
	if o == nil || isNil(o.DrugName) {
    return nil, false
	}
	return o.DrugName, true
}

// HasDrugName returns a boolean if a field has been set.
func (o *Drug) HasDrugName() bool {
	if o != nil && !isNil(o.DrugName) {
		return true
	}

	return false
}

// SetDrugName gets a reference to the given string and assigns it to the DrugName field.
func (o *Drug) SetDrugName(v string) {
	o.DrugName = &v
}

// GetNcitCode returns the NcitCode field value if set, zero value otherwise.
func (o *Drug) GetNcitCode() string {
	if o == nil || isNil(o.NcitCode) {
		var ret string
		return ret
	}
	return *o.NcitCode
}

// GetNcitCodeOk returns a tuple with the NcitCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drug) GetNcitCodeOk() (*string, bool) {
	if o == nil || isNil(o.NcitCode) {
    return nil, false
	}
	return o.NcitCode, true
}

// HasNcitCode returns a boolean if a field has been set.
func (o *Drug) HasNcitCode() bool {
	if o != nil && !isNil(o.NcitCode) {
		return true
	}

	return false
}

// SetNcitCode gets a reference to the given string and assigns it to the NcitCode field.
func (o *Drug) SetNcitCode(v string) {
	o.NcitCode = &v
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *Drug) GetSynonyms() []string {
	if o == nil || isNil(o.Synonyms) {
		var ret []string
		return ret
	}
	return o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drug) GetSynonymsOk() ([]string, bool) {
	if o == nil || isNil(o.Synonyms) {
    return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *Drug) HasSynonyms() bool {
	if o != nil && !isNil(o.Synonyms) {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given []string and assigns it to the Synonyms field.
func (o *Drug) SetSynonyms(v []string) {
	o.Synonyms = v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Drug) GetUuid() string {
	if o == nil || isNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drug) GetUuidOk() (*string, bool) {
	if o == nil || isNil(o.Uuid) {
    return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Drug) HasUuid() bool {
	if o != nil && !isNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Drug) SetUuid(v string) {
	o.Uuid = &v
}

func (o Drug) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DrugName) {
		toSerialize["drugName"] = o.DrugName
	}
	if !isNil(o.NcitCode) {
		toSerialize["ncitCode"] = o.NcitCode
	}
	if !isNil(o.Synonyms) {
		toSerialize["synonyms"] = o.Synonyms
	}
	if !isNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return json.Marshal(toSerialize)
}

type NullableDrug struct {
	value *Drug
	isSet bool
}

func (v NullableDrug) Get() *Drug {
	return v.value
}

func (v *NullableDrug) Set(val *Drug) {
	v.value = val
	v.isSet = true
}

func (v NullableDrug) IsSet() bool {
	return v.isSet
}

func (v *NullableDrug) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDrug(val *Drug) *NullableDrug {
	return &NullableDrug{value: val, isSet: true}
}

func (v NullableDrug) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDrug) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


