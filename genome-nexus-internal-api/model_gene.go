/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"encoding/json"
)

// Gene struct for Gene
type Gene struct {
	// geneid
	GeneId *string `json:"geneId,omitempty"`
	// symbol
	Symbol *string `json:"symbol,omitempty"`
}

// NewGene instantiates a new Gene object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGene() *Gene {
	this := Gene{}
	return &this
}

// NewGeneWithDefaults instantiates a new Gene object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeneWithDefaults() *Gene {
	this := Gene{}
	return &this
}

// GetGeneId returns the GeneId field value if set, zero value otherwise.
func (o *Gene) GetGeneId() string {
	if o == nil || isNil(o.GeneId) {
		var ret string
		return ret
	}
	return *o.GeneId
}

// GetGeneIdOk returns a tuple with the GeneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gene) GetGeneIdOk() (*string, bool) {
	if o == nil || isNil(o.GeneId) {
    return nil, false
	}
	return o.GeneId, true
}

// HasGeneId returns a boolean if a field has been set.
func (o *Gene) HasGeneId() bool {
	if o != nil && !isNil(o.GeneId) {
		return true
	}

	return false
}

// SetGeneId gets a reference to the given string and assigns it to the GeneId field.
func (o *Gene) SetGeneId(v string) {
	o.GeneId = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Gene) GetSymbol() string {
	if o == nil || isNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gene) GetSymbolOk() (*string, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Gene) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Gene) SetSymbol(v string) {
	o.Symbol = &v
}

func (o Gene) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.GeneId) {
		toSerialize["geneId"] = o.GeneId
	}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	return json.Marshal(toSerialize)
}

type NullableGene struct {
	value *Gene
	isSet bool
}

func (v NullableGene) Get() *Gene {
	return v.value
}

func (v *NullableGene) Set(val *Gene) {
	v.value = val
	v.isSet = true
}

func (v NullableGene) IsSet() bool {
	return v.isSet
}

func (v *NullableGene) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGene(val *Gene) *NullableGene {
	return &NullableGene{value: val, isSet: true}
}

func (v NullableGene) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGene) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


