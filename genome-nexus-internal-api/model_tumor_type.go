/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"encoding/json"
)

// TumorType OncoTree Detailed Cancer Type
type TumorType struct {
	Children *map[string]TumorType `json:"children,omitempty"`
	Code *string `json:"code,omitempty"`
	Color *string `json:"color,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Level *int32 `json:"level,omitempty"`
	MainType *MainType `json:"mainType,omitempty"`
	Name *string `json:"name,omitempty"`
	Parent *string `json:"parent,omitempty"`
	Tissue *string `json:"tissue,omitempty"`
	TumorForm *string `json:"tumorForm,omitempty"`
}

// NewTumorType instantiates a new TumorType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTumorType() *TumorType {
	this := TumorType{}
	return &this
}

// NewTumorTypeWithDefaults instantiates a new TumorType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTumorTypeWithDefaults() *TumorType {
	this := TumorType{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *TumorType) GetChildren() map[string]TumorType {
	if o == nil || isNil(o.Children) {
		var ret map[string]TumorType
		return ret
	}
	return *o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TumorType) GetChildrenOk() (*map[string]TumorType, bool) {
	if o == nil || isNil(o.Children) {
    return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *TumorType) HasChildren() bool {
	if o != nil && !isNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given map[string]TumorType and assigns it to the Children field.
func (o *TumorType) SetChildren(v map[string]TumorType) {
	o.Children = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TumorType) GetCode() string {
	if o == nil || isNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TumorType) GetCodeOk() (*string, bool) {
	if o == nil || isNil(o.Code) {
    return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TumorType) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TumorType) SetCode(v string) {
	o.Code = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *TumorType) GetColor() string {
	if o == nil || isNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TumorType) GetColorOk() (*string, bool) {
	if o == nil || isNil(o.Color) {
    return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *TumorType) HasColor() bool {
	if o != nil && !isNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *TumorType) SetColor(v string) {
	o.Color = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TumorType) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TumorType) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TumorType) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TumorType) SetId(v int32) {
	o.Id = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *TumorType) GetLevel() int32 {
	if o == nil || isNil(o.Level) {
		var ret int32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TumorType) GetLevelOk() (*int32, bool) {
	if o == nil || isNil(o.Level) {
    return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *TumorType) HasLevel() bool {
	if o != nil && !isNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int32 and assigns it to the Level field.
func (o *TumorType) SetLevel(v int32) {
	o.Level = &v
}

// GetMainType returns the MainType field value if set, zero value otherwise.
func (o *TumorType) GetMainType() MainType {
	if o == nil || isNil(o.MainType) {
		var ret MainType
		return ret
	}
	return *o.MainType
}

// GetMainTypeOk returns a tuple with the MainType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TumorType) GetMainTypeOk() (*MainType, bool) {
	if o == nil || isNil(o.MainType) {
    return nil, false
	}
	return o.MainType, true
}

// HasMainType returns a boolean if a field has been set.
func (o *TumorType) HasMainType() bool {
	if o != nil && !isNil(o.MainType) {
		return true
	}

	return false
}

// SetMainType gets a reference to the given MainType and assigns it to the MainType field.
func (o *TumorType) SetMainType(v MainType) {
	o.MainType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TumorType) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TumorType) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TumorType) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TumorType) SetName(v string) {
	o.Name = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *TumorType) GetParent() string {
	if o == nil || isNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TumorType) GetParentOk() (*string, bool) {
	if o == nil || isNil(o.Parent) {
    return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *TumorType) HasParent() bool {
	if o != nil && !isNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *TumorType) SetParent(v string) {
	o.Parent = &v
}

// GetTissue returns the Tissue field value if set, zero value otherwise.
func (o *TumorType) GetTissue() string {
	if o == nil || isNil(o.Tissue) {
		var ret string
		return ret
	}
	return *o.Tissue
}

// GetTissueOk returns a tuple with the Tissue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TumorType) GetTissueOk() (*string, bool) {
	if o == nil || isNil(o.Tissue) {
    return nil, false
	}
	return o.Tissue, true
}

// HasTissue returns a boolean if a field has been set.
func (o *TumorType) HasTissue() bool {
	if o != nil && !isNil(o.Tissue) {
		return true
	}

	return false
}

// SetTissue gets a reference to the given string and assigns it to the Tissue field.
func (o *TumorType) SetTissue(v string) {
	o.Tissue = &v
}

// GetTumorForm returns the TumorForm field value if set, zero value otherwise.
func (o *TumorType) GetTumorForm() string {
	if o == nil || isNil(o.TumorForm) {
		var ret string
		return ret
	}
	return *o.TumorForm
}

// GetTumorFormOk returns a tuple with the TumorForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TumorType) GetTumorFormOk() (*string, bool) {
	if o == nil || isNil(o.TumorForm) {
    return nil, false
	}
	return o.TumorForm, true
}

// HasTumorForm returns a boolean if a field has been set.
func (o *TumorType) HasTumorForm() bool {
	if o != nil && !isNil(o.TumorForm) {
		return true
	}

	return false
}

// SetTumorForm gets a reference to the given string and assigns it to the TumorForm field.
func (o *TumorType) SetTumorForm(v string) {
	o.TumorForm = &v
}

func (o TumorType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !isNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !isNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !isNil(o.MainType) {
		toSerialize["mainType"] = o.MainType
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !isNil(o.Tissue) {
		toSerialize["tissue"] = o.Tissue
	}
	if !isNil(o.TumorForm) {
		toSerialize["tumorForm"] = o.TumorForm
	}
	return json.Marshal(toSerialize)
}

type NullableTumorType struct {
	value *TumorType
	isSet bool
}

func (v NullableTumorType) Get() *TumorType {
	return v.value
}

func (v *NullableTumorType) Set(val *TumorType) {
	v.value = val
	v.isSet = true
}

func (v NullableTumorType) IsSet() bool {
	return v.isSet
}

func (v *NullableTumorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTumorType(val *TumorType) *NullableTumorType {
	return &NullableTumorType{value: val, isSet: true}
}

func (v NullableTumorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTumorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


