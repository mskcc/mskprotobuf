/*
Genome Nexus API

This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genome_nexus_internal_api

import (
	"encoding/json"
)

// IndicatorQueryResp struct for IndicatorQueryResp
type IndicatorQueryResp struct {
	AlleleExist *bool `json:"alleleExist,omitempty"`
	DataVersion *string `json:"dataVersion,omitempty"`
	DiagnosticImplications []Implication `json:"diagnosticImplications,omitempty"`
	DiagnosticSummary *string `json:"diagnosticSummary,omitempty"`
	GeneExist *bool `json:"geneExist,omitempty"`
	GeneSummary *string `json:"geneSummary,omitempty"`
	HighestDiagnosticImplicationLevel *string `json:"highestDiagnosticImplicationLevel,omitempty"`
	HighestPrognosticImplicationLevel *string `json:"highestPrognosticImplicationLevel,omitempty"`
	HighestResistanceLevel *string `json:"highestResistanceLevel,omitempty"`
	HighestSensitiveLevel *string `json:"highestSensitiveLevel,omitempty"`
	Hotspot *bool `json:"hotspot,omitempty"`
	LastUpdate *string `json:"lastUpdate,omitempty"`
	MutationEffect *MutationEffectResp `json:"mutationEffect,omitempty"`
	Oncogenic *string `json:"oncogenic,omitempty"`
	OtherSignificantResistanceLevels []string `json:"otherSignificantResistanceLevels,omitempty"`
	OtherSignificantSensitiveLevels []string `json:"otherSignificantSensitiveLevels,omitempty"`
	PrognosticImplications []Implication `json:"prognosticImplications,omitempty"`
	PrognosticSummary *string `json:"prognosticSummary,omitempty"`
	Query *Query `json:"query,omitempty"`
	Treatments []IndicatorQueryTreatment `json:"treatments,omitempty"`
	TumorTypeSummary *string `json:"tumorTypeSummary,omitempty"`
	VariantExist *bool `json:"variantExist,omitempty"`
	VariantSummary *string `json:"variantSummary,omitempty"`
	Vus *bool `json:"vus,omitempty"`
}

// NewIndicatorQueryResp instantiates a new IndicatorQueryResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndicatorQueryResp() *IndicatorQueryResp {
	this := IndicatorQueryResp{}
	return &this
}

// NewIndicatorQueryRespWithDefaults instantiates a new IndicatorQueryResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndicatorQueryRespWithDefaults() *IndicatorQueryResp {
	this := IndicatorQueryResp{}
	return &this
}

// GetAlleleExist returns the AlleleExist field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetAlleleExist() bool {
	if o == nil || isNil(o.AlleleExist) {
		var ret bool
		return ret
	}
	return *o.AlleleExist
}

// GetAlleleExistOk returns a tuple with the AlleleExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetAlleleExistOk() (*bool, bool) {
	if o == nil || isNil(o.AlleleExist) {
    return nil, false
	}
	return o.AlleleExist, true
}

// HasAlleleExist returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasAlleleExist() bool {
	if o != nil && !isNil(o.AlleleExist) {
		return true
	}

	return false
}

// SetAlleleExist gets a reference to the given bool and assigns it to the AlleleExist field.
func (o *IndicatorQueryResp) SetAlleleExist(v bool) {
	o.AlleleExist = &v
}

// GetDataVersion returns the DataVersion field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetDataVersion() string {
	if o == nil || isNil(o.DataVersion) {
		var ret string
		return ret
	}
	return *o.DataVersion
}

// GetDataVersionOk returns a tuple with the DataVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetDataVersionOk() (*string, bool) {
	if o == nil || isNil(o.DataVersion) {
    return nil, false
	}
	return o.DataVersion, true
}

// HasDataVersion returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasDataVersion() bool {
	if o != nil && !isNil(o.DataVersion) {
		return true
	}

	return false
}

// SetDataVersion gets a reference to the given string and assigns it to the DataVersion field.
func (o *IndicatorQueryResp) SetDataVersion(v string) {
	o.DataVersion = &v
}

// GetDiagnosticImplications returns the DiagnosticImplications field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetDiagnosticImplications() []Implication {
	if o == nil || isNil(o.DiagnosticImplications) {
		var ret []Implication
		return ret
	}
	return o.DiagnosticImplications
}

// GetDiagnosticImplicationsOk returns a tuple with the DiagnosticImplications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetDiagnosticImplicationsOk() ([]Implication, bool) {
	if o == nil || isNil(o.DiagnosticImplications) {
    return nil, false
	}
	return o.DiagnosticImplications, true
}

// HasDiagnosticImplications returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasDiagnosticImplications() bool {
	if o != nil && !isNil(o.DiagnosticImplications) {
		return true
	}

	return false
}

// SetDiagnosticImplications gets a reference to the given []Implication and assigns it to the DiagnosticImplications field.
func (o *IndicatorQueryResp) SetDiagnosticImplications(v []Implication) {
	o.DiagnosticImplications = v
}

// GetDiagnosticSummary returns the DiagnosticSummary field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetDiagnosticSummary() string {
	if o == nil || isNil(o.DiagnosticSummary) {
		var ret string
		return ret
	}
	return *o.DiagnosticSummary
}

// GetDiagnosticSummaryOk returns a tuple with the DiagnosticSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetDiagnosticSummaryOk() (*string, bool) {
	if o == nil || isNil(o.DiagnosticSummary) {
    return nil, false
	}
	return o.DiagnosticSummary, true
}

// HasDiagnosticSummary returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasDiagnosticSummary() bool {
	if o != nil && !isNil(o.DiagnosticSummary) {
		return true
	}

	return false
}

// SetDiagnosticSummary gets a reference to the given string and assigns it to the DiagnosticSummary field.
func (o *IndicatorQueryResp) SetDiagnosticSummary(v string) {
	o.DiagnosticSummary = &v
}

// GetGeneExist returns the GeneExist field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetGeneExist() bool {
	if o == nil || isNil(o.GeneExist) {
		var ret bool
		return ret
	}
	return *o.GeneExist
}

// GetGeneExistOk returns a tuple with the GeneExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetGeneExistOk() (*bool, bool) {
	if o == nil || isNil(o.GeneExist) {
    return nil, false
	}
	return o.GeneExist, true
}

// HasGeneExist returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasGeneExist() bool {
	if o != nil && !isNil(o.GeneExist) {
		return true
	}

	return false
}

// SetGeneExist gets a reference to the given bool and assigns it to the GeneExist field.
func (o *IndicatorQueryResp) SetGeneExist(v bool) {
	o.GeneExist = &v
}

// GetGeneSummary returns the GeneSummary field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetGeneSummary() string {
	if o == nil || isNil(o.GeneSummary) {
		var ret string
		return ret
	}
	return *o.GeneSummary
}

// GetGeneSummaryOk returns a tuple with the GeneSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetGeneSummaryOk() (*string, bool) {
	if o == nil || isNil(o.GeneSummary) {
    return nil, false
	}
	return o.GeneSummary, true
}

// HasGeneSummary returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasGeneSummary() bool {
	if o != nil && !isNil(o.GeneSummary) {
		return true
	}

	return false
}

// SetGeneSummary gets a reference to the given string and assigns it to the GeneSummary field.
func (o *IndicatorQueryResp) SetGeneSummary(v string) {
	o.GeneSummary = &v
}

// GetHighestDiagnosticImplicationLevel returns the HighestDiagnosticImplicationLevel field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetHighestDiagnosticImplicationLevel() string {
	if o == nil || isNil(o.HighestDiagnosticImplicationLevel) {
		var ret string
		return ret
	}
	return *o.HighestDiagnosticImplicationLevel
}

// GetHighestDiagnosticImplicationLevelOk returns a tuple with the HighestDiagnosticImplicationLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetHighestDiagnosticImplicationLevelOk() (*string, bool) {
	if o == nil || isNil(o.HighestDiagnosticImplicationLevel) {
    return nil, false
	}
	return o.HighestDiagnosticImplicationLevel, true
}

// HasHighestDiagnosticImplicationLevel returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasHighestDiagnosticImplicationLevel() bool {
	if o != nil && !isNil(o.HighestDiagnosticImplicationLevel) {
		return true
	}

	return false
}

// SetHighestDiagnosticImplicationLevel gets a reference to the given string and assigns it to the HighestDiagnosticImplicationLevel field.
func (o *IndicatorQueryResp) SetHighestDiagnosticImplicationLevel(v string) {
	o.HighestDiagnosticImplicationLevel = &v
}

// GetHighestPrognosticImplicationLevel returns the HighestPrognosticImplicationLevel field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetHighestPrognosticImplicationLevel() string {
	if o == nil || isNil(o.HighestPrognosticImplicationLevel) {
		var ret string
		return ret
	}
	return *o.HighestPrognosticImplicationLevel
}

// GetHighestPrognosticImplicationLevelOk returns a tuple with the HighestPrognosticImplicationLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetHighestPrognosticImplicationLevelOk() (*string, bool) {
	if o == nil || isNil(o.HighestPrognosticImplicationLevel) {
    return nil, false
	}
	return o.HighestPrognosticImplicationLevel, true
}

// HasHighestPrognosticImplicationLevel returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasHighestPrognosticImplicationLevel() bool {
	if o != nil && !isNil(o.HighestPrognosticImplicationLevel) {
		return true
	}

	return false
}

// SetHighestPrognosticImplicationLevel gets a reference to the given string and assigns it to the HighestPrognosticImplicationLevel field.
func (o *IndicatorQueryResp) SetHighestPrognosticImplicationLevel(v string) {
	o.HighestPrognosticImplicationLevel = &v
}

// GetHighestResistanceLevel returns the HighestResistanceLevel field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetHighestResistanceLevel() string {
	if o == nil || isNil(o.HighestResistanceLevel) {
		var ret string
		return ret
	}
	return *o.HighestResistanceLevel
}

// GetHighestResistanceLevelOk returns a tuple with the HighestResistanceLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetHighestResistanceLevelOk() (*string, bool) {
	if o == nil || isNil(o.HighestResistanceLevel) {
    return nil, false
	}
	return o.HighestResistanceLevel, true
}

// HasHighestResistanceLevel returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasHighestResistanceLevel() bool {
	if o != nil && !isNil(o.HighestResistanceLevel) {
		return true
	}

	return false
}

// SetHighestResistanceLevel gets a reference to the given string and assigns it to the HighestResistanceLevel field.
func (o *IndicatorQueryResp) SetHighestResistanceLevel(v string) {
	o.HighestResistanceLevel = &v
}

// GetHighestSensitiveLevel returns the HighestSensitiveLevel field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetHighestSensitiveLevel() string {
	if o == nil || isNil(o.HighestSensitiveLevel) {
		var ret string
		return ret
	}
	return *o.HighestSensitiveLevel
}

// GetHighestSensitiveLevelOk returns a tuple with the HighestSensitiveLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetHighestSensitiveLevelOk() (*string, bool) {
	if o == nil || isNil(o.HighestSensitiveLevel) {
    return nil, false
	}
	return o.HighestSensitiveLevel, true
}

// HasHighestSensitiveLevel returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasHighestSensitiveLevel() bool {
	if o != nil && !isNil(o.HighestSensitiveLevel) {
		return true
	}

	return false
}

// SetHighestSensitiveLevel gets a reference to the given string and assigns it to the HighestSensitiveLevel field.
func (o *IndicatorQueryResp) SetHighestSensitiveLevel(v string) {
	o.HighestSensitiveLevel = &v
}

// GetHotspot returns the Hotspot field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetHotspot() bool {
	if o == nil || isNil(o.Hotspot) {
		var ret bool
		return ret
	}
	return *o.Hotspot
}

// GetHotspotOk returns a tuple with the Hotspot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetHotspotOk() (*bool, bool) {
	if o == nil || isNil(o.Hotspot) {
    return nil, false
	}
	return o.Hotspot, true
}

// HasHotspot returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasHotspot() bool {
	if o != nil && !isNil(o.Hotspot) {
		return true
	}

	return false
}

// SetHotspot gets a reference to the given bool and assigns it to the Hotspot field.
func (o *IndicatorQueryResp) SetHotspot(v bool) {
	o.Hotspot = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetLastUpdate() string {
	if o == nil || isNil(o.LastUpdate) {
		var ret string
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetLastUpdateOk() (*string, bool) {
	if o == nil || isNil(o.LastUpdate) {
    return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasLastUpdate() bool {
	if o != nil && !isNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given string and assigns it to the LastUpdate field.
func (o *IndicatorQueryResp) SetLastUpdate(v string) {
	o.LastUpdate = &v
}

// GetMutationEffect returns the MutationEffect field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetMutationEffect() MutationEffectResp {
	if o == nil || isNil(o.MutationEffect) {
		var ret MutationEffectResp
		return ret
	}
	return *o.MutationEffect
}

// GetMutationEffectOk returns a tuple with the MutationEffect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetMutationEffectOk() (*MutationEffectResp, bool) {
	if o == nil || isNil(o.MutationEffect) {
    return nil, false
	}
	return o.MutationEffect, true
}

// HasMutationEffect returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasMutationEffect() bool {
	if o != nil && !isNil(o.MutationEffect) {
		return true
	}

	return false
}

// SetMutationEffect gets a reference to the given MutationEffectResp and assigns it to the MutationEffect field.
func (o *IndicatorQueryResp) SetMutationEffect(v MutationEffectResp) {
	o.MutationEffect = &v
}

// GetOncogenic returns the Oncogenic field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetOncogenic() string {
	if o == nil || isNil(o.Oncogenic) {
		var ret string
		return ret
	}
	return *o.Oncogenic
}

// GetOncogenicOk returns a tuple with the Oncogenic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetOncogenicOk() (*string, bool) {
	if o == nil || isNil(o.Oncogenic) {
    return nil, false
	}
	return o.Oncogenic, true
}

// HasOncogenic returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasOncogenic() bool {
	if o != nil && !isNil(o.Oncogenic) {
		return true
	}

	return false
}

// SetOncogenic gets a reference to the given string and assigns it to the Oncogenic field.
func (o *IndicatorQueryResp) SetOncogenic(v string) {
	o.Oncogenic = &v
}

// GetOtherSignificantResistanceLevels returns the OtherSignificantResistanceLevels field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetOtherSignificantResistanceLevels() []string {
	if o == nil || isNil(o.OtherSignificantResistanceLevels) {
		var ret []string
		return ret
	}
	return o.OtherSignificantResistanceLevels
}

// GetOtherSignificantResistanceLevelsOk returns a tuple with the OtherSignificantResistanceLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetOtherSignificantResistanceLevelsOk() ([]string, bool) {
	if o == nil || isNil(o.OtherSignificantResistanceLevels) {
    return nil, false
	}
	return o.OtherSignificantResistanceLevels, true
}

// HasOtherSignificantResistanceLevels returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasOtherSignificantResistanceLevels() bool {
	if o != nil && !isNil(o.OtherSignificantResistanceLevels) {
		return true
	}

	return false
}

// SetOtherSignificantResistanceLevels gets a reference to the given []string and assigns it to the OtherSignificantResistanceLevels field.
func (o *IndicatorQueryResp) SetOtherSignificantResistanceLevels(v []string) {
	o.OtherSignificantResistanceLevels = v
}

// GetOtherSignificantSensitiveLevels returns the OtherSignificantSensitiveLevels field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetOtherSignificantSensitiveLevels() []string {
	if o == nil || isNil(o.OtherSignificantSensitiveLevels) {
		var ret []string
		return ret
	}
	return o.OtherSignificantSensitiveLevels
}

// GetOtherSignificantSensitiveLevelsOk returns a tuple with the OtherSignificantSensitiveLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetOtherSignificantSensitiveLevelsOk() ([]string, bool) {
	if o == nil || isNil(o.OtherSignificantSensitiveLevels) {
    return nil, false
	}
	return o.OtherSignificantSensitiveLevels, true
}

// HasOtherSignificantSensitiveLevels returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasOtherSignificantSensitiveLevels() bool {
	if o != nil && !isNil(o.OtherSignificantSensitiveLevels) {
		return true
	}

	return false
}

// SetOtherSignificantSensitiveLevels gets a reference to the given []string and assigns it to the OtherSignificantSensitiveLevels field.
func (o *IndicatorQueryResp) SetOtherSignificantSensitiveLevels(v []string) {
	o.OtherSignificantSensitiveLevels = v
}

// GetPrognosticImplications returns the PrognosticImplications field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetPrognosticImplications() []Implication {
	if o == nil || isNil(o.PrognosticImplications) {
		var ret []Implication
		return ret
	}
	return o.PrognosticImplications
}

// GetPrognosticImplicationsOk returns a tuple with the PrognosticImplications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetPrognosticImplicationsOk() ([]Implication, bool) {
	if o == nil || isNil(o.PrognosticImplications) {
    return nil, false
	}
	return o.PrognosticImplications, true
}

// HasPrognosticImplications returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasPrognosticImplications() bool {
	if o != nil && !isNil(o.PrognosticImplications) {
		return true
	}

	return false
}

// SetPrognosticImplications gets a reference to the given []Implication and assigns it to the PrognosticImplications field.
func (o *IndicatorQueryResp) SetPrognosticImplications(v []Implication) {
	o.PrognosticImplications = v
}

// GetPrognosticSummary returns the PrognosticSummary field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetPrognosticSummary() string {
	if o == nil || isNil(o.PrognosticSummary) {
		var ret string
		return ret
	}
	return *o.PrognosticSummary
}

// GetPrognosticSummaryOk returns a tuple with the PrognosticSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetPrognosticSummaryOk() (*string, bool) {
	if o == nil || isNil(o.PrognosticSummary) {
    return nil, false
	}
	return o.PrognosticSummary, true
}

// HasPrognosticSummary returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasPrognosticSummary() bool {
	if o != nil && !isNil(o.PrognosticSummary) {
		return true
	}

	return false
}

// SetPrognosticSummary gets a reference to the given string and assigns it to the PrognosticSummary field.
func (o *IndicatorQueryResp) SetPrognosticSummary(v string) {
	o.PrognosticSummary = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetQuery() Query {
	if o == nil || isNil(o.Query) {
		var ret Query
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetQueryOk() (*Query, bool) {
	if o == nil || isNil(o.Query) {
    return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasQuery() bool {
	if o != nil && !isNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given Query and assigns it to the Query field.
func (o *IndicatorQueryResp) SetQuery(v Query) {
	o.Query = &v
}

// GetTreatments returns the Treatments field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetTreatments() []IndicatorQueryTreatment {
	if o == nil || isNil(o.Treatments) {
		var ret []IndicatorQueryTreatment
		return ret
	}
	return o.Treatments
}

// GetTreatmentsOk returns a tuple with the Treatments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetTreatmentsOk() ([]IndicatorQueryTreatment, bool) {
	if o == nil || isNil(o.Treatments) {
    return nil, false
	}
	return o.Treatments, true
}

// HasTreatments returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasTreatments() bool {
	if o != nil && !isNil(o.Treatments) {
		return true
	}

	return false
}

// SetTreatments gets a reference to the given []IndicatorQueryTreatment and assigns it to the Treatments field.
func (o *IndicatorQueryResp) SetTreatments(v []IndicatorQueryTreatment) {
	o.Treatments = v
}

// GetTumorTypeSummary returns the TumorTypeSummary field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetTumorTypeSummary() string {
	if o == nil || isNil(o.TumorTypeSummary) {
		var ret string
		return ret
	}
	return *o.TumorTypeSummary
}

// GetTumorTypeSummaryOk returns a tuple with the TumorTypeSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetTumorTypeSummaryOk() (*string, bool) {
	if o == nil || isNil(o.TumorTypeSummary) {
    return nil, false
	}
	return o.TumorTypeSummary, true
}

// HasTumorTypeSummary returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasTumorTypeSummary() bool {
	if o != nil && !isNil(o.TumorTypeSummary) {
		return true
	}

	return false
}

// SetTumorTypeSummary gets a reference to the given string and assigns it to the TumorTypeSummary field.
func (o *IndicatorQueryResp) SetTumorTypeSummary(v string) {
	o.TumorTypeSummary = &v
}

// GetVariantExist returns the VariantExist field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetVariantExist() bool {
	if o == nil || isNil(o.VariantExist) {
		var ret bool
		return ret
	}
	return *o.VariantExist
}

// GetVariantExistOk returns a tuple with the VariantExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetVariantExistOk() (*bool, bool) {
	if o == nil || isNil(o.VariantExist) {
    return nil, false
	}
	return o.VariantExist, true
}

// HasVariantExist returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasVariantExist() bool {
	if o != nil && !isNil(o.VariantExist) {
		return true
	}

	return false
}

// SetVariantExist gets a reference to the given bool and assigns it to the VariantExist field.
func (o *IndicatorQueryResp) SetVariantExist(v bool) {
	o.VariantExist = &v
}

// GetVariantSummary returns the VariantSummary field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetVariantSummary() string {
	if o == nil || isNil(o.VariantSummary) {
		var ret string
		return ret
	}
	return *o.VariantSummary
}

// GetVariantSummaryOk returns a tuple with the VariantSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetVariantSummaryOk() (*string, bool) {
	if o == nil || isNil(o.VariantSummary) {
    return nil, false
	}
	return o.VariantSummary, true
}

// HasVariantSummary returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasVariantSummary() bool {
	if o != nil && !isNil(o.VariantSummary) {
		return true
	}

	return false
}

// SetVariantSummary gets a reference to the given string and assigns it to the VariantSummary field.
func (o *IndicatorQueryResp) SetVariantSummary(v string) {
	o.VariantSummary = &v
}

// GetVus returns the Vus field value if set, zero value otherwise.
func (o *IndicatorQueryResp) GetVus() bool {
	if o == nil || isNil(o.Vus) {
		var ret bool
		return ret
	}
	return *o.Vus
}

// GetVusOk returns a tuple with the Vus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorQueryResp) GetVusOk() (*bool, bool) {
	if o == nil || isNil(o.Vus) {
    return nil, false
	}
	return o.Vus, true
}

// HasVus returns a boolean if a field has been set.
func (o *IndicatorQueryResp) HasVus() bool {
	if o != nil && !isNil(o.Vus) {
		return true
	}

	return false
}

// SetVus gets a reference to the given bool and assigns it to the Vus field.
func (o *IndicatorQueryResp) SetVus(v bool) {
	o.Vus = &v
}

func (o IndicatorQueryResp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AlleleExist) {
		toSerialize["alleleExist"] = o.AlleleExist
	}
	if !isNil(o.DataVersion) {
		toSerialize["dataVersion"] = o.DataVersion
	}
	if !isNil(o.DiagnosticImplications) {
		toSerialize["diagnosticImplications"] = o.DiagnosticImplications
	}
	if !isNil(o.DiagnosticSummary) {
		toSerialize["diagnosticSummary"] = o.DiagnosticSummary
	}
	if !isNil(o.GeneExist) {
		toSerialize["geneExist"] = o.GeneExist
	}
	if !isNil(o.GeneSummary) {
		toSerialize["geneSummary"] = o.GeneSummary
	}
	if !isNil(o.HighestDiagnosticImplicationLevel) {
		toSerialize["highestDiagnosticImplicationLevel"] = o.HighestDiagnosticImplicationLevel
	}
	if !isNil(o.HighestPrognosticImplicationLevel) {
		toSerialize["highestPrognosticImplicationLevel"] = o.HighestPrognosticImplicationLevel
	}
	if !isNil(o.HighestResistanceLevel) {
		toSerialize["highestResistanceLevel"] = o.HighestResistanceLevel
	}
	if !isNil(o.HighestSensitiveLevel) {
		toSerialize["highestSensitiveLevel"] = o.HighestSensitiveLevel
	}
	if !isNil(o.Hotspot) {
		toSerialize["hotspot"] = o.Hotspot
	}
	if !isNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	if !isNil(o.MutationEffect) {
		toSerialize["mutationEffect"] = o.MutationEffect
	}
	if !isNil(o.Oncogenic) {
		toSerialize["oncogenic"] = o.Oncogenic
	}
	if !isNil(o.OtherSignificantResistanceLevels) {
		toSerialize["otherSignificantResistanceLevels"] = o.OtherSignificantResistanceLevels
	}
	if !isNil(o.OtherSignificantSensitiveLevels) {
		toSerialize["otherSignificantSensitiveLevels"] = o.OtherSignificantSensitiveLevels
	}
	if !isNil(o.PrognosticImplications) {
		toSerialize["prognosticImplications"] = o.PrognosticImplications
	}
	if !isNil(o.PrognosticSummary) {
		toSerialize["prognosticSummary"] = o.PrognosticSummary
	}
	if !isNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !isNil(o.Treatments) {
		toSerialize["treatments"] = o.Treatments
	}
	if !isNil(o.TumorTypeSummary) {
		toSerialize["tumorTypeSummary"] = o.TumorTypeSummary
	}
	if !isNil(o.VariantExist) {
		toSerialize["variantExist"] = o.VariantExist
	}
	if !isNil(o.VariantSummary) {
		toSerialize["variantSummary"] = o.VariantSummary
	}
	if !isNil(o.Vus) {
		toSerialize["vus"] = o.Vus
	}
	return json.Marshal(toSerialize)
}

type NullableIndicatorQueryResp struct {
	value *IndicatorQueryResp
	isSet bool
}

func (v NullableIndicatorQueryResp) Get() *IndicatorQueryResp {
	return v.value
}

func (v *NullableIndicatorQueryResp) Set(val *IndicatorQueryResp) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicatorQueryResp) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicatorQueryResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicatorQueryResp(val *IndicatorQueryResp) *NullableIndicatorQueryResp {
	return &NullableIndicatorQueryResp{value: val, isSet: true}
}

func (v NullableIndicatorQueryResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicatorQueryResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


