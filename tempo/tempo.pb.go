// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: tempo.proto

package mpbtempo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chromosome               string                          `protobuf:"bytes,1,opt,name=chromosome,proto3" json:"chromosome,omitempty"`
	StartPosition            int32                           `protobuf:"varint,2,opt,name=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition              int32                           `protobuf:"varint,3,opt,name=endPosition,proto3" json:"endPosition,omitempty"`
	RefAllele                string                          `protobuf:"bytes,4,opt,name=refAllele,proto3" json:"refAllele,omitempty"`
	TumorSeqAllele1          string                          `protobuf:"bytes,5,opt,name=tumorSeqAllele1,proto3" json:"tumorSeqAllele1,omitempty"`
	TumorSeqAllele2          string                          `protobuf:"bytes,6,opt,name=tumorSeqAllele2,proto3" json:"tumorSeqAllele2,omitempty"`
	Neoantigen               *Event_Neoantigen               `protobuf:"bytes,7,opt,name=neoantigen,proto3" json:"neoantigen,omitempty"`
	Facets                   *Event_Facets                   `protobuf:"bytes,8,opt,name=facets,proto3" json:"facets,omitempty"`
	Getbasecountsmultisample *Event_GetBaseCountsMultiSample `protobuf:"bytes,9,opt,name=getbasecountsmultisample,proto3" json:"getbasecountsmultisample,omitempty"`
	Zygosityannotation       *Event_ZygosityAnnotation       `protobuf:"bytes,10,opt,name=zygosityannotation,proto3" json:"zygosityannotation,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tempo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_tempo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_tempo_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetChromosome() string {
	if x != nil {
		return x.Chromosome
	}
	return ""
}

func (x *Event) GetStartPosition() int32 {
	if x != nil {
		return x.StartPosition
	}
	return 0
}

func (x *Event) GetEndPosition() int32 {
	if x != nil {
		return x.EndPosition
	}
	return 0
}

func (x *Event) GetRefAllele() string {
	if x != nil {
		return x.RefAllele
	}
	return ""
}

func (x *Event) GetTumorSeqAllele1() string {
	if x != nil {
		return x.TumorSeqAllele1
	}
	return ""
}

func (x *Event) GetTumorSeqAllele2() string {
	if x != nil {
		return x.TumorSeqAllele2
	}
	return ""
}

func (x *Event) GetNeoantigen() *Event_Neoantigen {
	if x != nil {
		return x.Neoantigen
	}
	return nil
}

func (x *Event) GetFacets() *Event_Facets {
	if x != nil {
		return x.Facets
	}
	return nil
}

func (x *Event) GetGetbasecountsmultisample() *Event_GetBaseCountsMultiSample {
	if x != nil {
		return x.Getbasecountsmultisample
	}
	return nil
}

func (x *Event) GetZygosityannotation() *Event_ZygosityAnnotation {
	if x != nil {
		return x.Zygosityannotation
	}
	return nil
}

type TempoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmoSampleId       string   `protobuf:"bytes,1,opt,name=cmoSampleId,proto3" json:"cmoSampleId,omitempty"`
	NormalCmoSampleId string   `protobuf:"bytes,2,opt,name=normalCmoSampleId,proto3" json:"normalCmoSampleId,omitempty"`
	PipelineVersion   string   `protobuf:"bytes,3,opt,name=pipelineVersion,proto3" json:"pipelineVersion,omitempty"`
	Events            []*Event `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *TempoMessage) Reset() {
	*x = TempoMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tempo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempoMessage) ProtoMessage() {}

func (x *TempoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tempo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempoMessage.ProtoReflect.Descriptor instead.
func (*TempoMessage) Descriptor() ([]byte, []int) {
	return file_tempo_proto_rawDescGZIP(), []int{1}
}

func (x *TempoMessage) GetCmoSampleId() string {
	if x != nil {
		return x.CmoSampleId
	}
	return ""
}

func (x *TempoMessage) GetNormalCmoSampleId() string {
	if x != nil {
		return x.NormalCmoSampleId
	}
	return ""
}

func (x *TempoMessage) GetPipelineVersion() string {
	if x != nil {
		return x.PipelineVersion
	}
	return ""
}

func (x *TempoMessage) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type Event_Neoantigen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeoMafIdentifierKey    string  `protobuf:"bytes,1,opt,name=neo_maf_identifier_key,json=neoMafIdentifierKey,proto3" json:"neo_maf_identifier_key,omitempty"`
	NeoBestIcorePeptide    string  `protobuf:"bytes,2,opt,name=neo_best_icore_peptide,json=neoBestIcorePeptide,proto3" json:"neo_best_icore_peptide,omitempty"`
	NeoBestRank            float64 `protobuf:"fixed64,3,opt,name=neo_best_rank,json=neoBestRank,proto3" json:"neo_best_rank,omitempty"`
	NeoBestBindingAffinity float64 `protobuf:"fixed64,4,opt,name=neo_best_binding_affinity,json=neoBestBindingAffinity,proto3" json:"neo_best_binding_affinity,omitempty"`
	NeoBestBinderClass     string  `protobuf:"bytes,5,opt,name=neo_best_binder_class,json=neoBestBinderClass,proto3" json:"neo_best_binder_class,omitempty"`
	NeoBestIsInWtPeptidome bool    `protobuf:"varint,6,opt,name=neo_best_is_in_wt_peptidome,json=neoBestIsInWtPeptidome,proto3" json:"neo_best_is_in_wt_peptidome,omitempty"`
	NeoBestAlgorithm       string  `protobuf:"bytes,7,opt,name=neo_best_algorithm,json=neoBestAlgorithm,proto3" json:"neo_best_algorithm,omitempty"`
	NeoBestHlaAllele       string  `protobuf:"bytes,8,opt,name=neo_best_hla_allele,json=neoBestHlaAllele,proto3" json:"neo_best_hla_allele,omitempty"`
	NeoNPeptidesEvaluated  int32   `protobuf:"varint,9,opt,name=neo_n_peptides_evaluated,json=neoNPeptidesEvaluated,proto3" json:"neo_n_peptides_evaluated,omitempty"`
	NeoNStrongBinders      int32   `protobuf:"varint,10,opt,name=neo_n_strong_binders,json=neoNStrongBinders,proto3" json:"neo_n_strong_binders,omitempty"`
	NeoNWeakBinders        int32   `protobuf:"varint,11,opt,name=neo_n_weak_binders,json=neoNWeakBinders,proto3" json:"neo_n_weak_binders,omitempty"`
}

func (x *Event_Neoantigen) Reset() {
	*x = Event_Neoantigen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tempo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Neoantigen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Neoantigen) ProtoMessage() {}

func (x *Event_Neoantigen) ProtoReflect() protoreflect.Message {
	mi := &file_tempo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Neoantigen.ProtoReflect.Descriptor instead.
func (*Event_Neoantigen) Descriptor() ([]byte, []int) {
	return file_tempo_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Event_Neoantigen) GetNeoMafIdentifierKey() string {
	if x != nil {
		return x.NeoMafIdentifierKey
	}
	return ""
}

func (x *Event_Neoantigen) GetNeoBestIcorePeptide() string {
	if x != nil {
		return x.NeoBestIcorePeptide
	}
	return ""
}

func (x *Event_Neoantigen) GetNeoBestRank() float64 {
	if x != nil {
		return x.NeoBestRank
	}
	return 0
}

func (x *Event_Neoantigen) GetNeoBestBindingAffinity() float64 {
	if x != nil {
		return x.NeoBestBindingAffinity
	}
	return 0
}

func (x *Event_Neoantigen) GetNeoBestBinderClass() string {
	if x != nil {
		return x.NeoBestBinderClass
	}
	return ""
}

func (x *Event_Neoantigen) GetNeoBestIsInWtPeptidome() bool {
	if x != nil {
		return x.NeoBestIsInWtPeptidome
	}
	return false
}

func (x *Event_Neoantigen) GetNeoBestAlgorithm() string {
	if x != nil {
		return x.NeoBestAlgorithm
	}
	return ""
}

func (x *Event_Neoantigen) GetNeoBestHlaAllele() string {
	if x != nil {
		return x.NeoBestHlaAllele
	}
	return ""
}

func (x *Event_Neoantigen) GetNeoNPeptidesEvaluated() int32 {
	if x != nil {
		return x.NeoNPeptidesEvaluated
	}
	return 0
}

func (x *Event_Neoantigen) GetNeoNStrongBinders() int32 {
	if x != nil {
		return x.NeoNStrongBinders
	}
	return 0
}

func (x *Event_Neoantigen) GetNeoNWeakBinders() int32 {
	if x != nil {
		return x.NeoNWeakBinders
	}
	return 0
}

type Event_Facets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tcn                     int32   `protobuf:"varint,1,opt,name=tcn,proto3" json:"tcn,omitempty"`
	Lcn                     int32   `protobuf:"varint,2,opt,name=lcn,proto3" json:"lcn,omitempty"`
	Cf                      float64 `protobuf:"fixed64,3,opt,name=cf,proto3" json:"cf,omitempty"`
	Purity                  float64 `protobuf:"fixed64,4,opt,name=purity,proto3" json:"purity,omitempty"`
	ExpectedAltCopies       int32   `protobuf:"varint,5,opt,name=expected_alt_copies,json=expectedAltCopies,proto3" json:"expected_alt_copies,omitempty"`
	CcfExpectedCopies       float64 `protobuf:"fixed64,6,opt,name=ccf_expected_copies,json=ccfExpectedCopies,proto3" json:"ccf_expected_copies,omitempty"`
	CcfExpectedCopiesLower  float64 `protobuf:"fixed64,7,opt,name=ccf_expected_copies_lower,json=ccfExpectedCopiesLower,proto3" json:"ccf_expected_copies_lower,omitempty"`
	CcfExpectedCopiesUpper  float64 `protobuf:"fixed64,8,opt,name=ccf_expected_copies_upper,json=ccfExpectedCopiesUpper,proto3" json:"ccf_expected_copies_upper,omitempty"`
	CcfExpectedCopiesProb95 float64 `protobuf:"fixed64,9,opt,name=ccf_expected_copies_prob95,json=ccfExpectedCopiesProb95,proto3" json:"ccf_expected_copies_prob95,omitempty"`
	CcfExpectedCopiesProb90 float64 `protobuf:"fixed64,10,opt,name=ccf_expected_copies_prob90,json=ccfExpectedCopiesProb90,proto3" json:"ccf_expected_copies_prob90,omitempty"`
	Clonality               string  `protobuf:"bytes,11,opt,name=clonality,proto3" json:"clonality,omitempty"`
}

func (x *Event_Facets) Reset() {
	*x = Event_Facets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tempo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Facets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Facets) ProtoMessage() {}

func (x *Event_Facets) ProtoReflect() protoreflect.Message {
	mi := &file_tempo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Facets.ProtoReflect.Descriptor instead.
func (*Event_Facets) Descriptor() ([]byte, []int) {
	return file_tempo_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Event_Facets) GetTcn() int32 {
	if x != nil {
		return x.Tcn
	}
	return 0
}

func (x *Event_Facets) GetLcn() int32 {
	if x != nil {
		return x.Lcn
	}
	return 0
}

func (x *Event_Facets) GetCf() float64 {
	if x != nil {
		return x.Cf
	}
	return 0
}

func (x *Event_Facets) GetPurity() float64 {
	if x != nil {
		return x.Purity
	}
	return 0
}

func (x *Event_Facets) GetExpectedAltCopies() int32 {
	if x != nil {
		return x.ExpectedAltCopies
	}
	return 0
}

func (x *Event_Facets) GetCcfExpectedCopies() float64 {
	if x != nil {
		return x.CcfExpectedCopies
	}
	return 0
}

func (x *Event_Facets) GetCcfExpectedCopiesLower() float64 {
	if x != nil {
		return x.CcfExpectedCopiesLower
	}
	return 0
}

func (x *Event_Facets) GetCcfExpectedCopiesUpper() float64 {
	if x != nil {
		return x.CcfExpectedCopiesUpper
	}
	return 0
}

func (x *Event_Facets) GetCcfExpectedCopiesProb95() float64 {
	if x != nil {
		return x.CcfExpectedCopiesProb95
	}
	return 0
}

func (x *Event_Facets) GetCcfExpectedCopiesProb90() float64 {
	if x != nil {
		return x.CcfExpectedCopiesProb90
	}
	return 0
}

func (x *Event_Facets) GetClonality() string {
	if x != nil {
		return x.Clonality
	}
	return ""
}

type Event_GetBaseCountsMultiSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TAltCountRaw    int32 `protobuf:"varint,1,opt,name=t_alt_count_raw,json=tAltCountRaw,proto3" json:"t_alt_count_raw,omitempty"`
	NAltCountRaw    int32 `protobuf:"varint,2,opt,name=n_alt_count_raw,json=nAltCountRaw,proto3" json:"n_alt_count_raw,omitempty"`
	TAltCountRawFwd int32 `protobuf:"varint,3,opt,name=t_alt_count_raw_fwd,json=tAltCountRawFwd,proto3" json:"t_alt_count_raw_fwd,omitempty"`
	NAltCountRawFwd int32 `protobuf:"varint,4,opt,name=n_alt_count_raw_fwd,json=nAltCountRawFwd,proto3" json:"n_alt_count_raw_fwd,omitempty"`
	TAltCountRawRev int32 `protobuf:"varint,5,opt,name=t_alt_count_raw_rev,json=tAltCountRawRev,proto3" json:"t_alt_count_raw_rev,omitempty"`
	NAltCountRawRev int32 `protobuf:"varint,6,opt,name=n_alt_count_raw_rev,json=nAltCountRawRev,proto3" json:"n_alt_count_raw_rev,omitempty"`
	TRefCountRaw    int32 `protobuf:"varint,7,opt,name=t_ref_count_raw,json=tRefCountRaw,proto3" json:"t_ref_count_raw,omitempty"`
	NRefCountRaw    int32 `protobuf:"varint,8,opt,name=n_ref_count_raw,json=nRefCountRaw,proto3" json:"n_ref_count_raw,omitempty"`
	TRefCountRawFwd int32 `protobuf:"varint,9,opt,name=t_ref_count_raw_fwd,json=tRefCountRawFwd,proto3" json:"t_ref_count_raw_fwd,omitempty"`
	NRefCountRawFwd int32 `protobuf:"varint,10,opt,name=n_ref_count_raw_fwd,json=nRefCountRawFwd,proto3" json:"n_ref_count_raw_fwd,omitempty"`
	TRefCountRawRev int32 `protobuf:"varint,11,opt,name=t_ref_count_raw_rev,json=tRefCountRawRev,proto3" json:"t_ref_count_raw_rev,omitempty"`
	NRefCountRawRev int32 `protobuf:"varint,12,opt,name=n_ref_count_raw_rev,json=nRefCountRawRev,proto3" json:"n_ref_count_raw_rev,omitempty"`
	TDepthRaw       int32 `protobuf:"varint,13,opt,name=t_depth_raw,json=tDepthRaw,proto3" json:"t_depth_raw,omitempty"`
	NDepthRaw       int32 `protobuf:"varint,14,opt,name=n_depth_raw,json=nDepthRaw,proto3" json:"n_depth_raw,omitempty"`
	TDepthRawFwd    int32 `protobuf:"varint,15,opt,name=t_depth_raw_fwd,json=tDepthRawFwd,proto3" json:"t_depth_raw_fwd,omitempty"`
	NDepthRawFwd    int32 `protobuf:"varint,16,opt,name=n_depth_raw_fwd,json=nDepthRawFwd,proto3" json:"n_depth_raw_fwd,omitempty"`
	TDepthRawRev    int32 `protobuf:"varint,17,opt,name=t_depth_raw_rev,json=tDepthRawRev,proto3" json:"t_depth_raw_rev,omitempty"`
	NDepthRawRev    int32 `protobuf:"varint,18,opt,name=n_depth_raw_rev,json=nDepthRawRev,proto3" json:"n_depth_raw_rev,omitempty"`
}

func (x *Event_GetBaseCountsMultiSample) Reset() {
	*x = Event_GetBaseCountsMultiSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tempo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_GetBaseCountsMultiSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_GetBaseCountsMultiSample) ProtoMessage() {}

func (x *Event_GetBaseCountsMultiSample) ProtoReflect() protoreflect.Message {
	mi := &file_tempo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_GetBaseCountsMultiSample.ProtoReflect.Descriptor instead.
func (*Event_GetBaseCountsMultiSample) Descriptor() ([]byte, []int) {
	return file_tempo_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Event_GetBaseCountsMultiSample) GetTAltCountRaw() int32 {
	if x != nil {
		return x.TAltCountRaw
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetNAltCountRaw() int32 {
	if x != nil {
		return x.NAltCountRaw
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetTAltCountRawFwd() int32 {
	if x != nil {
		return x.TAltCountRawFwd
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetNAltCountRawFwd() int32 {
	if x != nil {
		return x.NAltCountRawFwd
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetTAltCountRawRev() int32 {
	if x != nil {
		return x.TAltCountRawRev
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetNAltCountRawRev() int32 {
	if x != nil {
		return x.NAltCountRawRev
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetTRefCountRaw() int32 {
	if x != nil {
		return x.TRefCountRaw
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetNRefCountRaw() int32 {
	if x != nil {
		return x.NRefCountRaw
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetTRefCountRawFwd() int32 {
	if x != nil {
		return x.TRefCountRawFwd
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetNRefCountRawFwd() int32 {
	if x != nil {
		return x.NRefCountRawFwd
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetTRefCountRawRev() int32 {
	if x != nil {
		return x.TRefCountRawRev
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetNRefCountRawRev() int32 {
	if x != nil {
		return x.NRefCountRawRev
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetTDepthRaw() int32 {
	if x != nil {
		return x.TDepthRaw
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetNDepthRaw() int32 {
	if x != nil {
		return x.NDepthRaw
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetTDepthRawFwd() int32 {
	if x != nil {
		return x.TDepthRawFwd
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetNDepthRawFwd() int32 {
	if x != nil {
		return x.NDepthRawFwd
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetTDepthRawRev() int32 {
	if x != nil {
		return x.TDepthRawRev
	}
	return 0
}

func (x *Event_GetBaseCountsMultiSample) GetNDepthRawRev() int32 {
	if x != nil {
		return x.NDepthRawRev
	}
	return 0
}

type Event_ZygosityAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRefCopies          int32   `protobuf:"varint,1,opt,name=num_ref_copies,json=numRefCopies,proto3" json:"num_ref_copies,omitempty"`
	NumAltCopies          int32   `protobuf:"varint,2,opt,name=num_alt_copies,json=numAltCopies,proto3" json:"num_alt_copies,omitempty"`
	ExpectedTAltFreqLower float64 `protobuf:"fixed64,3,opt,name=expected_t_alt_freq_lower,json=expectedTAltFreqLower,proto3" json:"expected_t_alt_freq_lower,omitempty"`
	ExpectedTAltFreqUpper float64 `protobuf:"fixed64,4,opt,name=expected_t_alt_freq_upper,json=expectedTAltFreqUpper,proto3" json:"expected_t_alt_freq_upper,omitempty"`
	TumorVafCnConcordance bool    `protobuf:"varint,5,opt,name=tumor_vaf_cn_concordance,json=tumorVafCnConcordance,proto3" json:"tumor_vaf_cn_concordance,omitempty"`
	AllelicImbalance      string  `protobuf:"bytes,6,opt,name=allelic_imbalance,json=allelicImbalance,proto3" json:"allelic_imbalance,omitempty"`
	LossOfHeterozygosity  bool    `protobuf:"varint,7,opt,name=loss_of_heterozygosity,json=lossOfHeterozygosity,proto3" json:"loss_of_heterozygosity,omitempty"`
	ZygosityFlag          string  `protobuf:"bytes,8,opt,name=zygosity_flag,json=zygosityFlag,proto3" json:"zygosity_flag,omitempty"`
}

func (x *Event_ZygosityAnnotation) Reset() {
	*x = Event_ZygosityAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tempo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_ZygosityAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_ZygosityAnnotation) ProtoMessage() {}

func (x *Event_ZygosityAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_tempo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_ZygosityAnnotation.ProtoReflect.Descriptor instead.
func (*Event_ZygosityAnnotation) Descriptor() ([]byte, []int) {
	return file_tempo_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Event_ZygosityAnnotation) GetNumRefCopies() int32 {
	if x != nil {
		return x.NumRefCopies
	}
	return 0
}

func (x *Event_ZygosityAnnotation) GetNumAltCopies() int32 {
	if x != nil {
		return x.NumAltCopies
	}
	return 0
}

func (x *Event_ZygosityAnnotation) GetExpectedTAltFreqLower() float64 {
	if x != nil {
		return x.ExpectedTAltFreqLower
	}
	return 0
}

func (x *Event_ZygosityAnnotation) GetExpectedTAltFreqUpper() float64 {
	if x != nil {
		return x.ExpectedTAltFreqUpper
	}
	return 0
}

func (x *Event_ZygosityAnnotation) GetTumorVafCnConcordance() bool {
	if x != nil {
		return x.TumorVafCnConcordance
	}
	return false
}

func (x *Event_ZygosityAnnotation) GetAllelicImbalance() string {
	if x != nil {
		return x.AllelicImbalance
	}
	return ""
}

func (x *Event_ZygosityAnnotation) GetLossOfHeterozygosity() bool {
	if x != nil {
		return x.LossOfHeterozygosity
	}
	return false
}

func (x *Event_ZygosityAnnotation) GetZygosityFlag() string {
	if x != nil {
		return x.ZygosityFlag
	}
	return ""
}

var File_tempo_proto protoreflect.FileDescriptor

var file_tempo_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63,
	0x62, 0x69, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xad, 0x15, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73,
	0x6f, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x75, 0x6d,
	0x6f, 0x72, 0x53, 0x65, 0x71, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x31, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x53, 0x65, 0x71, 0x41, 0x6c, 0x6c, 0x65,
	0x6c, 0x65, 0x31, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x53, 0x65, 0x71, 0x41,
	0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x75,
	0x6d, 0x6f, 0x72, 0x53, 0x65, 0x71, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x32, 0x12, 0x3c, 0x0a,
	0x0a, 0x6e, 0x65, 0x6f, 0x61, 0x6e, 0x74, 0x69, 0x67, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x62, 0x69, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x6f, 0x61, 0x6e, 0x74, 0x69, 0x67, 0x65, 0x6e, 0x52,
	0x0a, 0x6e, 0x65, 0x6f, 0x61, 0x6e, 0x74, 0x69, 0x67, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x66,
	0x61, 0x63, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x62,
	0x69, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46,
	0x61, 0x63, 0x65, 0x74, 0x73, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x12, 0x66, 0x0a,
	0x18, 0x67, 0x65, 0x74, 0x62, 0x61, 0x73, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x62, 0x69, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x18, 0x67, 0x65, 0x74,
	0x62, 0x61, 0x73, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x7a, 0x79, 0x67, 0x6f, 0x73, 0x69, 0x74,
	0x79, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x62, 0x69, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x5a, 0x79, 0x67, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x7a, 0x79, 0x67, 0x6f, 0x73, 0x69, 0x74,
	0x79, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb9, 0x04, 0x0a, 0x0a,
	0x4e, 0x65, 0x6f, 0x61, 0x6e, 0x74, 0x69, 0x67, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x65,
	0x6f, 0x5f, 0x6d, 0x61, 0x66, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x65, 0x6f, 0x4d,
	0x61, 0x66, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x33, 0x0a, 0x16, 0x6e, 0x65, 0x6f, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x70, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x6e, 0x65, 0x6f, 0x42, 0x65, 0x73, 0x74, 0x49, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x70,
	0x74, 0x69, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x6f, 0x5f, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x6f,
	0x42, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x65, 0x6f, 0x5f,
	0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6e, 0x65, 0x6f,
	0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x65, 0x6f, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x6f, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x1b, 0x6e, 0x65, 0x6f, 0x5f, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x74, 0x5f, 0x70, 0x65, 0x70, 0x74,
	0x69, 0x64, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6e, 0x65, 0x6f,
	0x42, 0x65, 0x73, 0x74, 0x49, 0x73, 0x49, 0x6e, 0x57, 0x74, 0x50, 0x65, 0x70, 0x74, 0x69, 0x64,
	0x6f, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x6f, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6e, 0x65, 0x6f, 0x42, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x65, 0x6f, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x6c,
	0x61, 0x5f, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6e, 0x65, 0x6f, 0x42, 0x65, 0x73, 0x74, 0x48, 0x6c, 0x61, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65,
	0x12, 0x37, 0x0a, 0x18, 0x6e, 0x65, 0x6f, 0x5f, 0x6e, 0x5f, 0x70, 0x65, 0x70, 0x74, 0x69, 0x64,
	0x65, 0x73, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x6e, 0x65, 0x6f, 0x4e, 0x50, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x73,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x6f,
	0x5f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x65, 0x6f, 0x4e, 0x53, 0x74, 0x72,
	0x6f, 0x6e, 0x67, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65,
	0x6f, 0x5f, 0x6e, 0x5f, 0x77, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x6f, 0x4e, 0x57, 0x65, 0x61, 0x6b,
	0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x1a, 0xc2, 0x03, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x65,
	0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x63, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x74, 0x63, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x63, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6c, 0x63, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x63, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e,
	0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x74, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x63, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x63, 0x66,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x19, 0x63, 0x63, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x70, 0x69, 0x65, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x16, 0x63, 0x63, 0x66, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x70, 0x69, 0x65, 0x73, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x63, 0x66,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73,
	0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x63,
	0x66, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x55,
	0x70, 0x70, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x63, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x62,
	0x39, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x63, 0x63, 0x66, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x39,
	0x35, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x63, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x39, 0x30, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x63, 0x63, 0x66, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x39, 0x30, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x82, 0x06, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x74, 0x5f, 0x61,
	0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x41, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x77,
	0x12, 0x25, 0x0a, 0x0f, 0x6e, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x41, 0x6c, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x12, 0x2c, 0x0a, 0x13, 0x74, 0x5f, 0x61, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x77, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x41, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x61, 0x77, 0x46, 0x77, 0x64, 0x12, 0x2c, 0x0a, 0x13, 0x6e, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x41, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x77,
	0x46, 0x77, 0x64, 0x12, 0x2c, 0x0a, 0x13, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x74, 0x41, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x52, 0x65,
	0x76, 0x12, 0x2c, 0x0a, 0x13, 0x6e, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6e, 0x41, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x52, 0x65, 0x76, 0x12,
	0x25, 0x0a, 0x0f, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x61, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x52, 0x65, 0x66, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x12, 0x25, 0x0a, 0x0f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6e, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x12, 0x2c, 0x0a,
	0x13, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77,
	0x5f, 0x66, 0x77, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x52, 0x65, 0x66,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x46, 0x77, 0x64, 0x12, 0x2c, 0x0a, 0x13, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x66,
	0x77, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x52, 0x65, 0x66, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x46, 0x77, 0x64, 0x12, 0x2c, 0x0a, 0x13, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x76,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x61, 0x77, 0x52, 0x65, 0x76, 0x12, 0x2c, 0x0a, 0x13, 0x6e, 0x5f, 0x72, 0x65, 0x66,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x61, 0x77, 0x52, 0x65, 0x76, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x5f, 0x72, 0x61, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x52, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x5f, 0x72, 0x61, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x52, 0x61, 0x77, 0x12, 0x25, 0x0a, 0x0f, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x5f, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x77, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x61, 0x77, 0x46, 0x77, 0x64, 0x12, 0x25, 0x0a, 0x0f,
	0x6e, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x77, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x61, 0x77,
	0x46, 0x77, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x72,
	0x61, 0x77, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x44,
	0x65, 0x70, 0x74, 0x68, 0x52, 0x61, 0x77, 0x52, 0x65, 0x76, 0x12, 0x25, 0x0a, 0x0f, 0x6e, 0x5f,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x61, 0x77, 0x52, 0x65,
	0x76, 0x1a, 0x95, 0x03, 0x0a, 0x12, 0x5a, 0x79, 0x67, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x41, 0x6c, 0x74, 0x43, 0x6f,
	0x70, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x54, 0x41, 0x6c, 0x74, 0x46, 0x72, 0x65, 0x71, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x19, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x5f, 0x61, 0x6c, 0x74,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x41, 0x6c, 0x74, 0x46,
	0x72, 0x65, 0x71, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x75, 0x6d, 0x6f,
	0x72, 0x5f, 0x76, 0x61, 0x66, 0x5f, 0x63, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x74, 0x75, 0x6d, 0x6f,
	0x72, 0x56, 0x61, 0x66, 0x43, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x69, 0x63, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x68, 0x65, 0x74, 0x65, 0x72, 0x6f,
	0x7a, 0x79, 0x67, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x6c, 0x6f, 0x73, 0x73, 0x4f, 0x66, 0x48, 0x65, 0x74, 0x65, 0x72, 0x6f, 0x7a, 0x79, 0x67, 0x6f,
	0x73, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x7a, 0x79, 0x67, 0x6f, 0x73, 0x69, 0x74, 0x79,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x7a, 0x79, 0x67,
	0x6f, 0x73, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xb3, 0x01, 0x0a, 0x0c, 0x54, 0x65,
	0x6d, 0x70, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6d,
	0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6d, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6d, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43,
	0x6d, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x62, 0x69, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x73,
	0x6b, 0x63, 0x63, 0x2f, 0x6d, 0x73, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tempo_proto_rawDescOnce sync.Once
	file_tempo_proto_rawDescData = file_tempo_proto_rawDesc
)

func file_tempo_proto_rawDescGZIP() []byte {
	file_tempo_proto_rawDescOnce.Do(func() {
		file_tempo_proto_rawDescData = protoimpl.X.CompressGZIP(file_tempo_proto_rawDescData)
	})
	return file_tempo_proto_rawDescData
}

var file_tempo_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_tempo_proto_goTypes = []interface{}{
	(*Event)(nil),                          // 0: cbiomodels.Event
	(*TempoMessage)(nil),                   // 1: cbiomodels.TempoMessage
	(*Event_Neoantigen)(nil),               // 2: cbiomodels.Event.Neoantigen
	(*Event_Facets)(nil),                   // 3: cbiomodels.Event.Facets
	(*Event_GetBaseCountsMultiSample)(nil), // 4: cbiomodels.Event.GetBaseCountsMultiSample
	(*Event_ZygosityAnnotation)(nil),       // 5: cbiomodels.Event.ZygosityAnnotation
}
var file_tempo_proto_depIdxs = []int32{
	2, // 0: cbiomodels.Event.neoantigen:type_name -> cbiomodels.Event.Neoantigen
	3, // 1: cbiomodels.Event.facets:type_name -> cbiomodels.Event.Facets
	4, // 2: cbiomodels.Event.getbasecountsmultisample:type_name -> cbiomodels.Event.GetBaseCountsMultiSample
	5, // 3: cbiomodels.Event.zygosityannotation:type_name -> cbiomodels.Event.ZygosityAnnotation
	0, // 4: cbiomodels.TempoMessage.events:type_name -> cbiomodels.Event
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_tempo_proto_init() }
func file_tempo_proto_init() {
	if File_tempo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tempo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tempo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempoMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tempo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Neoantigen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tempo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Facets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tempo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_GetBaseCountsMultiSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tempo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_ZygosityAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tempo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tempo_proto_goTypes,
		DependencyIndexes: file_tempo_proto_depIdxs,
		MessageInfos:      file_tempo_proto_msgTypes,
	}.Build()
	File_tempo_proto = out.File
	file_tempo_proto_rawDesc = nil
	file_tempo_proto_goTypes = nil
	file_tempo_proto_depIdxs = nil
}
